{"version":3,"file":"static/js/774.d0ddd564.chunk.js","mappings":"oNAAO,MAAMA,EACI,iMADJA,EAEI,sVAFJA,EAGI,sPAHJA,EAII,4QAJJA,EAKIC,GAAG,qGAAAC,OAAyBD,EAAG,qDALnCD,EAMIG,GAAG,2GAAAD,OAA0BC,EAAG,qDAG3CC,EAAW,CACfC,aAAe,kBACfC,cAAe,kEACfC,aAAe,kDAGJC,EAAa,CACxBC,SAAUC,GACRA,GAASA,EAAMC,OAAS,KAAOX,EAEjCY,YAAaF,GACVA,GAAUA,EAAMC,SAAUP,EAASC,aAAaQ,KAAKH,GAElDV,EADA,KAGNc,cAAeJ,IACb,IAAKA,IAAUA,EAAMC,OAAQ,OAAO,KACpC,MAAMI,EAAOL,EAAMM,QAAQ,SAAU,IACrC,OAAOZ,EAASE,cAAcO,KAAKE,GAC/B,KACAf,GAGNiB,YAAaP,GACVA,GAAUA,EAAMC,SAAUP,EAASG,aAAaM,KAAKH,GAElDV,EADA,KAGNkB,UAAWjB,GAAOS,IACfA,IAAUA,EAAMC,QAAUD,EAAMS,QAAUlB,EACvC,KACAD,EAA0BC,GAEhCmB,UAAWjB,GAAOO,IACfA,IAAUA,EAAMC,QAAUD,EAAMS,QAAUhB,EACvC,KACAH,EAA0BG,IC5ClC,SAAgB,KAAO,0BAA0B,MAAQ,2BAA2B,MAAQ,2BAA2B,WAAa,gCAAgC,QAAU,6BAA6B,SAAW,8BAA8B,OAAS,4BAA4B,eAAiB,oCAAoC,QAAU,6BAA6B,MAAQ,4B,aCO7X,MAAMkB,EAAS,CACbC,QAAe,CAAEC,MAAO,6DAAiBC,MAAO,CAAC,WAAY,gBAC7DV,cAAe,CAAES,MAAO,2EAAiBC,MAAO,CAAC,WAAY,kBAC7DC,QAAe,CAAEF,MAAO,6CAAiBC,MAAO,CAAC,WAAY,gBAC7DE,KAAe,CAAEH,MAAO,2BAAiBC,MAAO,KAGnC,SAASG,IACtB,MAAMC,GAAKC,EAAAA,EAAAA,OAEJC,EAASC,EAAcC,GChBzB,SAAiBC,GACtB,MAAOC,EAAQC,IAAaC,EAAAA,EAAAA,UAASH,GAMrC,MAAO,CAACC,EALaG,IACnB,MAAM,KAAEC,EAAI,MAAE5B,GAAU2B,EAAEE,OAC1BJ,EAAUK,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAI,IAAE,CAACF,GAAO5B,MAE1BgC,IAAMP,EAAUF,GAEhC,CDQ6CU,CACzCC,OAAOC,KAAKxB,GAAQyB,OAAO,CAACC,EAAGC,KAACP,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAWM,GAAC,IAAE,CAACC,GAAI,KAAO,CAAC,KAEvD,OAAEC,EAAM,aAAEC,GElBX,SAAuBC,EAAQjB,GACpC,MAAOe,EAAQG,IAAahB,EAAAA,EAAAA,UAAS,CAAC,GAEhCiB,GAAgBC,EAAAA,EAAAA,aAAaC,IACjC,MAAM,MAAE/B,EAAQ,IAAO2B,EAAOI,IAAc,CAAC,EAC7C,IAAK,MAAMC,KAAQhC,EAAO,CAAC,IAADiC,EACxB,MAAMC,EACY,kBAATF,EAAoBhD,EAAWgD,GACtB,oBAATA,EAAsBA,EAC7B,KAEF,IAAKE,EAAW,SAEhB,MAAMC,EAAQD,EAA2B,QAAlBD,EAACvB,EAAOqB,UAAU,IAAAE,EAAAA,EAAI,IAC7C,GAAIE,EAAO,OAAOA,CACpB,CACA,OAAO,MACN,CAACR,EAAQjB,IAENgB,GAAeI,EAAAA,EAAAA,aAAY,KAC/B,MAAMM,EAAS,CAAC,EAMhB,OALAhB,OAAOC,KAAKM,GAAQU,QAAQvB,IAC1B,MAAMqB,EAAQN,EAAcf,GACxBqB,IAAOC,EAAOtB,GAAQqB,KAE5BP,EAAUQ,GAC4B,IAA/BhB,OAAOC,KAAKe,GAAQzC,QAC1B,CAACgC,EAAQE,IAEZ,MAAO,CAAEJ,SAAQI,gBAAeH,eAClC,CFZmCY,CAAczC,EAAQS,IAEhDiC,EAASC,IAAc5B,EAAAA,EAAAA,WAAS,IAChCuB,EAASM,IAAc7B,EAAAA,EAAAA,UAAS,KAChC8B,EAASC,IAAc/B,EAAAA,EAAAA,WAAS,GAEjCgC,GAAWC,EAAAA,EAAAA,GAAY,CAC3BC,WAAYC,EAAAA,GAEZC,SAAUC,UAAiB,IAADC,QAClB9C,EAAG+C,cAAc,CAAEC,SAAUC,EAAAA,EAAWC,aAE9C,MAAMtC,EAA6C,QAAzCkC,EAAG9C,EAAGmD,aAAaF,EAAAA,EAAWC,mBAAW,IAAAJ,EAAAA,EAAI,GACjDM,GAAIvC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQwC,GAAI,IAAEC,GAAIC,KAAKC,MAAOC,QAAQ,IAGhD,OAFAzD,EAAG0D,aAAaT,EAAAA,EAAWC,WAAY,IAAItC,EAAMwC,IAE1C,CAAExC,OAAM+C,OAAQP,EAAKE,KAG9BM,QAASA,CAACC,EAAMC,EAAOC,MAClB,OAAHA,QAAG,IAAHA,OAAG,EAAHA,EAAKnD,OAAQZ,EAAG0D,aAAaT,EAAAA,EAAWC,WAAYa,EAAInD,MACxDyB,EAAS,4IAGX2B,UAAWA,CAACC,EAAQH,EAAOC,KACzB/D,EAAG0D,aAAaT,EAAAA,EAAWC,WAAY,WAAS,OAALgB,UAAA3E,OAAA,QAAA4E,IAAAD,UAAA,GAAAA,UAAA,GAAG,IACxCE,OAAOC,GAAKA,EAAEf,MAAU,OAAHS,QAAG,IAAHA,OAAG,EAAHA,EAAKJ,QAAO,GAEvCvB,GAAW,GACXhC,IACAmC,GAAW,IAGb+B,UAAWA,KACTtE,EAAGuE,kBAAkB,CAAEvB,SAAUC,EAAAA,EAAWC,gBAkBhD,OACEsB,EAAAA,EAAAA,MAAA,QAAMC,SAfUhE,IAKhB,GAJAA,EAAEiE,iBACFtC,GAAW,GACXC,EAAS,KAEJf,IAGH,OAFAiB,GAAW,QACXF,EAAS,6OAIXG,EAASmC,OAAOzE,IAIU0E,UAAWC,EAAOC,KAAMC,YAAU,EAAAC,SAAA,CACzDhE,OAAOiE,QAAQxF,GAAQyF,IAAIC,IAA+B,IAA7BzE,GAAM,MAAEf,EAAK,MAAEC,IAAQuF,EACnD,MAAMtG,EAAYe,EAAMwF,SAAS,YAC3BC,EAAY/C,GAAWjB,EAAOX,GAEpC,OACE8D,EAAAA,EAAAA,MAAA,SAAkBI,UAAWC,EAAOS,MAAMN,SAAA,EACxCR,EAAAA,EAAAA,MAAA,QAAMI,UAAWC,EAAOU,QAAQP,SAAA,CAC7BrF,EACAd,IAAY2G,EAAAA,EAAAA,KAAA,QAAMZ,UAAWC,EAAOY,SAAST,SAAC,MAAS,QAG1DQ,EAAAA,EAAAA,KAAA,SACE9E,KAAMA,EACN5B,MAAOoB,EAAQQ,GACfgF,SAAUvF,EACVyE,UAAS,GAAAtG,OAAKuG,EAAOc,MAAK,KAAArH,OAAI+G,EAAYR,EAAOe,WAAa,MAG/DP,IAAaG,EAAAA,EAAAA,KAAA,QAAMZ,UAAWC,EAAOgB,UAAUb,SAAE3D,EAAOX,OAb/CA,MAkBhB8E,EAAAA,EAAAA,KAAA,UACEM,KAAK,SACLC,SAAUvD,EAASwD,UACnBpB,UAAS,GAAAtG,OAAKuG,EAAOoB,OAAM,KAAA3H,OACzB0C,OAAOC,KAAKI,GAAQ9B,OAASsF,EAAOqB,eAAiB,IACpDlB,SAEFxC,EAASwD,UAAY,yDAAc,qDAGrC7D,IAAWqD,EAAAA,EAAAA,KAAA,KAAGZ,UAAWC,EAAO1C,QAAQ6C,SAAC,mEACzCjD,IAAWyC,EAAAA,EAAAA,MAAA,KAAGI,UAAWC,EAAO9C,MAAMiD,SAAA,CAAC,UAAGjD,OAGjD,CG/GA,SAAgB,YAAc,iCAAiC,MAAQ,2BAA2B,YAAc,kCCGjG,SAASoE,IACtB,OACE3B,EAAAA,EAAAA,MAAA,OAAKI,UAAWC,EAAOuB,YAAYpB,SAAA,EACjCQ,EAAAA,EAAAA,KAAA,MAAIZ,UAAWC,EAAOwB,MAAMrB,SAAC,oHAC7BQ,EAAAA,EAAAA,KAAA,OAAKZ,UAAWC,EAAOyB,YAAYtB,UACjCQ,EAAAA,EAAAA,KAACzF,EAAW,QAIpB,C,iGCcO,MAAMwG,UAKHC,EAAAA,EAeRC,WAAAA,CACEC,EACAC,GAEAC,QAEAC,KAAKH,OAASA,EACdG,KAAKC,WAAWH,GAChBE,KAAKE,cACLF,KAAKG,cACN,CAESD,WAAAA,GACRF,KAAKlC,OAASkC,KAAKlC,OAAOsC,KAAKJ,MAC/BA,KAAK/F,MAAQ+F,KAAK/F,MAAMmG,KAAKJ,KAC9B,CAEDC,UAAAA,CACEH,GACA,IAAAO,EACA,MAAMC,EAAcN,KAAKF,QACzBE,KAAKF,QAAUE,KAAKH,OAAOU,uBAAuBT,IAC7CU,EAAAA,EAAAA,IAAoBF,EAAaN,KAAKF,UACzCE,KAAKH,OAAOY,mBAAmBC,OAAO,CACpCzB,KAAM,yBACNtD,SAAUqE,KAAKW,gBACfC,SAAUZ,OAGd,OAAAK,EAAAL,KAAKW,kBAALN,EAAsBJ,WAAWD,KAAKF,QACvC,CAESe,aAAAA,GACkB,IAAAC,EAArBd,KAAKe,iBACR,OAAAD,EAAAd,KAAKW,kBAALG,EAAsBE,eAAehB,MAExC,CAEDiB,gBAAAA,CAAiBC,GACflB,KAAKG,eAGL,MAAMgB,EAA+B,CACnCC,WAAW,GAGO,YAAhBF,EAAOjC,KACTkC,EAAchE,WAAY,EACD,UAAhB+D,EAAOjC,OAChBkC,EAAcpE,SAAU,GAG1BiD,KAAKU,OAAOS,EACb,CAEDE,gBAAAA,GAME,OAAOrB,KAAKsB,aACb,CAEDrH,KAAAA,GACE+F,KAAKW,qBAAkBrD,EACvB0C,KAAKG,eACLH,KAAKU,OAAO,CAAEU,WAAW,GAC1B,CAEDtD,MAAAA,CACEyD,EACAzB,GAgBA,OAdAE,KAAKwB,cAAgB1B,EAEjBE,KAAKW,iBACPX,KAAKW,gBAAgBK,eAAehB,MAGtCA,KAAKW,gBAAkBX,KAAKH,OAAOY,mBAAmBgB,MAAMzB,KAAKH,QAA1C7F,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAClBgG,KAAKF,SAD+D,IAEvEyB,UACuB,qBAAdA,EAA4BA,EAAYvB,KAAKF,QAAQyB,aAGhEvB,KAAKW,gBAAgBe,YAAY1B,MAE1BA,KAAKW,gBAAgBgB,SAC7B,CAEOxB,YAAAA,GACN,MAAMyB,EAAQ5B,KAAKW,gBACfX,KAAKW,gBAAgBiB,OACrBC,EAAAA,EAAAA,KAEEC,EAA6B,YAAjBF,EAAMG,OAClB5G,GAKLnB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACI4H,GADD,IAEFE,YACA3C,UAAW2C,EACXE,UAA4B,YAAjBJ,EAAMG,OACjBE,QAA0B,UAAjBL,EAAMG,OACfG,OAAyB,SAAjBN,EAAMG,OACdjE,OAAQkC,KAAKlC,OACb7D,MAAO+F,KAAK/F,QAGd+F,KAAKsB,cAAgBnG,CAMtB,CAEOuF,MAAAA,CAAOZ,GACbqC,EAAAA,EAAcC,MAAM,KAGO,IAAAC,EAAAC,EAAAC,EAAAC,EADzB,GAAIxC,KAAKwB,eAAiBxB,KAAKe,eAC7B,GAAIjB,EAAQ3C,UAER,OADFkF,GAAAC,EAAAtC,KAAKwB,eAAcrE,YACjBkF,EAAAI,KAAAH,EAAAtC,KAAKsB,cAAcoB,KACnB1C,KAAKsB,cAAcC,UACnBvB,KAAKsB,cAAcqB,SAErB,OAAAJ,GAAAC,EAAAxC,KAAKwB,eAAc/D,YAAnB8E,EAAAE,KAAAD,EACExC,KAAKsB,cAAcoB,KACnB,KACA1C,KAAKsB,cAAcC,UACnBvB,KAAKsB,cAAcqB,cAEhB,GAAI7C,EAAQ/C,QAAS,KAAA6F,EAAAC,EAAAC,EAAAC,EAExB,OADFH,GAAAC,EAAA7C,KAAKwB,eAAczE,UACjB6F,EAAAH,KAAAI,EAAA7C,KAAKsB,cAAcpG,MACnB8E,KAAKsB,cAAcC,UACnBvB,KAAKsB,cAAcqB,SAErB,OAAAG,GAAAC,EAAA/C,KAAKwB,eAAc/D,YAAnBqF,EAAAL,KAAAM,OACEzF,EACA0C,KAAKsB,cAAcpG,MACnB8E,KAAKsB,cAAcC,UACnBvB,KAAKsB,cAAcqB,QAEtB,CAIC7C,EAAQsB,WACVpB,KAAKoB,UAAUhG,QAAQkD,IAAkB,IAAjB,SAAE0E,GAAH1E,EACrB0E,EAAShD,KAAKsB,kBAIrB,E,kCC7II,SAAA1F,EAAAqH,EAAAC,EAAAC,G,yDAkBLvC,GAAAwC,EAAAA,SAAA,QAAA1D,EAAA2D,EAAAvD,I,kCAUC,CAAAc,EAAAd,IAED,MAAA3E,GAAAmI,EAAAA,EAAAA,GAAAF,EAAAA,YAAAG,GAAA3C,EAAA4C,UAAArB,EAAAA,EAAAsB,WAAAF,IAAA,CAAA3C,IAAA,IAAAA,EAAAS,mBAAA,IAAAT,EAAAS,oB,gDAeG,CAAAT,IAIH,GAAAzF,EAAAD,QAAAwI,EAAAA,EAAAA,GAAA9C,EAAAd,QAAA6D,iBAAA,CAAAxI,EAAAD,Q,6EAQD,CAGD,SAAA0I,IAAA,C,kCC7HO,MAAMxH,EAAa,CAExByH,MAAO,CAAC,SACRxH,WAAY,CAAC,aAGbyH,YAAa,CAAC,cAGdC,YAAa,CAAC,c,+FCTT,SAASC,EAAeC,GAC7B,IACE,OAAOC,KAAKC,MAAMC,aAAaC,QAAQJ,KAAS,EAClD,CAAE,MAAAK,GACA,MAAO,EACT,CACF,CAEO,SAASC,EAAaN,EAAKvB,GAChC0B,aAAaI,QAAQP,EAAKC,KAAKO,UAAU/B,GAC3C,CCPA,MAAMgC,EAAUC,qDAEHC,EAAsB,aACtBC,EAAsB,eAEtBC,EAAwBA,IACnCC,EAAAA,EAAMC,IAAI,GAADvN,OAAIiN,EAAO,WAAUO,KAAKC,GAAKA,EAAExC,MAE/ByC,EAAyB3I,GACpCuI,EAAAA,EAAMK,KAAK,GAAD3N,OAAIiN,EAAO,UAAUlI,GAAMyI,KAAKC,GAAKA,EAAExC,MAEtC2C,EAAyB7I,GACpCuI,EAAAA,EAAMO,IAAI,GAAD7N,OAAIiN,EAAO,WAAAjN,OAAU+E,EAAKC,IAAMD,GAAMyI,KAAKC,GAAKA,EAAExC,MAEhD6C,EAAyB9I,GACpCsI,EAAAA,EAAMS,OAAO,GAAD/N,OAAIiN,EAAO,WAAAjN,OAAUgF,IAG5BT,eAAeF,EAAQU,GAC5B,IACE,MAAMkG,QAAayC,EAAgB3I,GAEnC,GAAgB,OAAR,OAAJkG,QAAI,IAAJA,OAAI,EAAJA,EAAMjG,IAAY,CACpB,MAAMgJ,EAAazB,EAAeY,GAC/BrH,OAAOC,GAAKkI,OAAOlI,EAAE3E,SAAS8M,gBAAkBnJ,EAAK3D,QAAQ8M,eAEhE,OADApB,EAAaK,EAAmBa,GACzB/C,CACT,CACF,CAAE,MAAOkD,GACT,CAEA,MAAMC,GAAK7L,EAAAA,EAAAA,GAAA,CAAMyC,GAAG,SAADhF,OAAWiF,KAAKC,QAAYH,GACzCsJ,EAAS9B,EAAeY,GAE9B,OADAL,EAAaK,EAAmB,IAAIkB,EAAOD,IACpCA,CACT,CAGO7J,eAAe+J,EAAWvJ,GAC/B,MAAMkG,QAAc2C,EAAmB7I,GACjCC,EAA2B,kBAAZiG,EAAKjG,GAAkBiG,EAAKjG,GAAKD,EAAKC,GACrDoJ,GAAK7L,EAAAA,EAAAA,GAAA,CAAKyC,MAAOD,GAEjBwJ,EAAShC,EAAeY,GAC3BrH,OAAOC,GAAKkI,OAAOlI,EAAEf,MAAQiJ,OAAOjJ,IAEvC,OADA8H,EAAaK,EAAmB,IAAIoB,EAAQH,IACrCA,CACT,CAGO7J,eAAeiK,EAAWxJ,GAC1BiJ,OAAOjJ,GAAIyJ,WAAW,iBACnBX,EAAmB9I,GAG3B,MAAM0J,EAASnC,EAAeY,GAC3BrH,OAAOC,GAAKkI,OAAOlI,EAAEf,MAAQiJ,OAAOjJ,IACvC8H,EAAaK,EAAmBuB,GAEhC,MAAMC,EAAUpC,EAAea,GAI/B,OAHKuB,EAAQ7H,SAASmH,OAAOjJ,KAC3B8H,EAAaM,EAAqB,IAAIuB,EAASV,OAAOjJ,KAEjDA,CACT,CAGOT,eAAeqK,IACpB,MAAMC,QAAexB,IACfsB,EAAUpC,EAAea,GACzBiB,EAAU9B,EAAeY,GAEzB2B,EAAWD,EAAO/I,OAAOC,IAAM4I,EAAQ7H,SAASmH,OAAOlI,EAAEf,MAO/D,MAAO,IANU8J,EAASlI,IAAIb,GAC5BsI,EAAMU,KAAKlM,GAAKoL,OAAOpL,EAAEmC,MAAQiJ,OAAOlI,EAAEf,MAAQe,MAErCsI,EAAMvI,OAAOjD,IACzBiM,EAASC,KAAKhJ,GAAKkI,OAAOlI,EAAEf,MAAQiJ,OAAOpL,EAAEmC,MAGlD,C","sources":["utils/validation.js","webpack://english-flashcards/./src/components/words/AddWordForm/AddWordForm.module.scss?ff72","components/words/AddWordForm/AddWordForm.jsx","hooks/base/useForm.js","hooks/words/useValidation.js","webpack://english-flashcards/./src/pages/AddWordPage/AddWordPage.module.scss?fb1a","pages/AddWordPage/AddWordPage.jsx","../node_modules/@tanstack/query-core/src/mutationObserver.ts","../node_modules/@tanstack/react-query/src/useMutation.ts","constants/queryKeys.js","utils/storage.js","api/words.js"],"sourcesContent":["export const ERROR_MESSAGES = {\n  REQUIRED     : 'Это поле обязательно для заполнения',\n  ENGLISH_WORD : 'Используйте только английские буквы, пробелы, дефисы и апострофы',\n  TRANSCRIPTION: 'Используйте корректные символы транскрипции',\n  RUSSIAN_WORD : 'Используйте только русские буквы, пробелы и дефисы',\n  MIN_LENGTH   : min => `Минимальная длина ${min} символов`,\n  MAX_LENGTH   : max => `Максимальная длина ${max} символов`,\n};\n\nconst PATTERNS = {\n  ENGLISH_WORD : /^[A-Za-z\\s'-]+$/,\n  TRANSCRIPTION: /^[a-zA-Z\\u0250-\\u02AF\\u02C8\\u02CC\\u02D0\\s'ːˈˌ]+$/,\n  RUSSIAN_WORD : /^[А-Яа-яЁё\\s-]+$/,\n};\n\nexport const validators = {\n  required: value =>\n    value && value.trim() ? null : ERROR_MESSAGES.REQUIRED,\n\n  englishWord: value =>\n    !value || !value.trim() || PATTERNS.ENGLISH_WORD.test(value)\n      ? null\n      : ERROR_MESSAGES.ENGLISH_WORD,\n\n  transcription: value => {\n    if (!value || !value.trim()) return null;       \n    const pure = value.replace(/\\[|\\]/g, '');       \n    return PATTERNS.TRANSCRIPTION.test(pure)\n      ? null\n      : ERROR_MESSAGES.TRANSCRIPTION;\n  },\n\n  russianWord: value =>\n    !value || !value.trim() || PATTERNS.RUSSIAN_WORD.test(value)\n      ? null\n      : ERROR_MESSAGES.RUSSIAN_WORD,\n\n  minLength: min => value =>\n    !value || !value.trim() || value.length >= min\n      ? null\n      : ERROR_MESSAGES.MIN_LENGTH(min),\n\n  maxLength: max => value =>\n    !value || !value.trim() || value.length <= max\n      ? null\n      : ERROR_MESSAGES.MAX_LENGTH(max),\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"AddWordForm_form__3YoZc\",\"field\":\"AddWordForm_field__CR9-8\",\"input\":\"AddWordForm_input__GQ-nM\",\"errorInput\":\"AddWordForm_errorInput__4f3O7\",\"caption\":\"AddWordForm_caption__Ybb5y\",\"asterisk\":\"AddWordForm_asterisk__D6XWX\",\"button\":\"AddWordForm_button__eQWs4\",\"buttonInactive\":\"AddWordForm_buttonInactive__EVScR\",\"success\":\"AddWordForm_success__oroQ-\",\"error\":\"AddWordForm_error__5DqMM\"};","import React, { useState } from 'react';\nimport { useQueryClient, useMutation } from '@tanstack/react-query';\nimport { addWord } from '../../../api/words';\nimport { QUERY_KEYS } from '../../../constants/queryKeys';\nimport { useForm } from '../../../hooks/base/useForm';\nimport { useValidation } from '../../../hooks/words/useValidation';\nimport styles from './AddWordForm.module.scss';\n\nconst FIELDS = {\n  english:       { label: 'Слово (англ.)', rules: ['required', 'englishWord'] },\n  transcription: { label: 'Транскрипция',  rules: ['required', 'transcription'] },\n  russian:       { label: 'Перевод',       rules: ['required', 'russianWord'] },\n  tags:          { label: 'Тема',          rules: [] },\n};\n\nexport default function AddWordForm() {\n  const qc = useQueryClient();\n\n  const [newWord, handleChange, resetForm] = useForm(\n    Object.keys(FIELDS).reduce((a, k) => ({ ...a, [k]: '' }), {})\n  );\n  const { errors, validateForm } = useValidation(FIELDS, newWord);\n\n  const [success, setSuccess] = useState(false);\n  const [error,   setError]   = useState('');\n  const [touched, setTouched] = useState(false);\n\n  const mutation = useMutation({\n    mutationFn: addWord,\n\n    onMutate: async (word) => {\n      await qc.cancelQueries({ queryKey: QUERY_KEYS.WORDS_FULL });\n\n      const prev = qc.getQueryData(QUERY_KEYS.WORDS_FULL) ?? [];\n      const temp = { ...word, id: Date.now(), __temp: true };\n      qc.setQueryData(QUERY_KEYS.WORDS_FULL, [...prev, temp]);\n\n      return { prev, tempId: temp.id };\n    },\n\n    onError: (_err, _word, ctx) => {\n      ctx?.prev && qc.setQueryData(QUERY_KEYS.WORDS_FULL, ctx.prev);\n      setError('Не удалось добавить слово');\n    },\n\n    onSuccess: (_saved, _word, ctx) => {\n      qc.setQueryData(QUERY_KEYS.WORDS_FULL, (old = []) =>\n        old.filter(w => w.id !== ctx?.tempId)\n      );\n      setSuccess(true);\n      resetForm();\n      setTouched(false);\n    },\n\n    onSettled: () => {\n      qc.invalidateQueries({ queryKey: QUERY_KEYS.WORDS_FULL });\n    },\n  });\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    setSuccess(false);\n    setError('');\n\n    if (!validateForm()) {\n      setTouched(true);\n      setError('Пожалуйста, заполните все обязательные поля');\n      return;\n    }\n\n    mutation.mutate(newWord);\n  };\n\n  return (\n    <form onSubmit={onSubmit} className={styles.form} noValidate>\n      {Object.entries(FIELDS).map(([name, { label, rules }]) => {\n        const required  = rules.includes('required');\n        const showError = touched && errors[name];\n\n        return (\n          <label key={name} className={styles.field}>\n            <span className={styles.caption}>\n              {label}\n              {required && <span className={styles.asterisk}>*</span>}:\n            </span>\n\n            <input\n              name={name}\n              value={newWord[name]}\n              onChange={handleChange}\n              className={`${styles.input} ${showError ? styles.errorInput : ''}`}\n            />\n\n            {showError && <span className={styles.errorNote}>{errors[name]}</span>}\n          </label>\n        );\n      })}\n\n      <button\n        type=\"submit\"\n        disabled={mutation.isPending}\n        className={`${styles.button} ${\n          Object.keys(errors).length ? styles.buttonInactive : ''\n        }`}\n      >\n        {mutation.isPending ? 'Добавляю…' : 'Добавить'}\n      </button>\n\n      {success && <p className={styles.success}>✅ Добавлено!</p>}\n      {error   && <p className={styles.error}>❌ {error}</p>}\n    </form>\n  );\n}\n","import { useState } from 'react'\n\nexport function useForm(initial) {\n  const [values, setValues] = useState(initial)\n  const handleChange = e => {\n    const { name, value } = e.target\n    setValues(prev => ({ ...prev, [name]: value }))\n  }\n  const reset = () => setValues(initial)\n  return [values, handleChange, reset]\n}\n","import { useCallback, useState } from 'react'\nimport { validators } from '../../utils/validation'\n\nexport function useValidation(schema, values) {\n  const [errors, setErrors] = useState({})\n\n  const validateField = useCallback((fieldName) => {\n    const { rules = [] } = schema[fieldName] || {}\n    for (const rule of rules) {\n      const validator =\n        typeof rule === 'string' ? validators[rule] :\n        typeof rule === 'function' ? rule :\n        null\n\n      if (!validator) continue\n\n      const error = validator(values[fieldName] ?? '')\n      if (error) return error\n    }\n    return null\n  }, [schema, values])\n\n  const validateForm = useCallback(() => {\n    const result = {}\n    Object.keys(schema).forEach(name => {\n      const error = validateField(name)\n      if (error) result[name] = error\n    })\n    setErrors(result)\n    return Object.keys(result).length === 0\n  }, [schema, validateField])\n\n  return { errors, validateField, validateForm }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"addWordPage\":\"AddWordPage_addWordPage__WFs9K\",\"title\":\"AddWordPage_title__JXZ2w\",\"formWrapper\":\"AddWordPage_formWrapper__S9MIc\"};","import React from 'react';\nimport AddWordForm from '../../components/words/AddWordForm/AddWordForm';\nimport styles from './AddWordPage.module.scss';\n\nexport default function AddWordPage() {\n  return (\n    <div className={styles.addWordPage}>\n      <h2 className={styles.title}>Добавить новое слово</h2>\n      <div className={styles.formWrapper}>\n        <AddWordForm />\n      </div>\n    </div>\n  );\n}\n","import { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport { Subscribable } from './subscribable'\nimport { shallowEqualObjects } from './utils'\nimport type { QueryClient } from './queryClient'\nimport type {\n  MutateOptions,\n  MutationObserverBaseResult,\n  MutationObserverOptions,\n  MutationObserverResult,\n} from './types'\nimport type { Action, Mutation } from './mutation'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options\n    this.options = this.client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.currentMutation,\n        observer: this,\n      })\n    }\n    this.currentMutation?.setOptions(this.options)\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables:\n        typeof variables !== 'undefined' ? variables : this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    const isLoading = state.status === 'loading'\n    const result: MutationObserverBaseResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    > = {\n      ...state,\n      isLoading,\n      isPending: isLoading,\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n\n    this.currentResult = result as MutationObserverResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    >\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions && this.hasListeners()) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!,\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach(({ listener }) => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n","'use client'\nimport * as React from 'react'\nimport {\n  MutationObserver,\n  notifyManager,\n  parseMutationArgs,\n} from '@tanstack/query-core'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport { useQueryClient } from './QueryClientProvider'\nimport { shouldThrowError } from './utils'\nimport type { MutationFunction, MutationKey } from '@tanstack/query-core'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationFn: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  mutationFn?: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey' | 'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  arg1:\n    | MutationKey\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg2?:\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg3?: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const options = parseMutationArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient({ context: options.context })\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        queryClient,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.useErrorBoundary, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\n","export const QUERY_KEYS = {\n  // Основные запросы слов\n  WORDS: ['words'],\n  WORDS_FULL: ['wordsFull'],\n\n  // Тренировочные слова\n  TRAIN_WORDS: ['trainWords'],\n\n  // Словарный запас\n  VOCAB_WORDS: ['vocabWords'],\n}","export function getFromStorage(key) {\n  try {\n    return JSON.parse(localStorage.getItem(key)) || [];\n  } catch {\n    return [];\n  }\n}\n\nexport function setToStorage(key, data) {\n  localStorage.setItem(key, JSON.stringify(data));\n}\n","import axios from 'axios';\nimport { getFromStorage, setToStorage } from '../utils/storage';\n\nconst API_URL = process.env.REACT_APP_API_URL;\n\nexport const STORAGE_KEY_ADDED   = 'addedWords';\nexport const STORAGE_KEY_DELETED = 'deletedWords';\n\nexport const fetchWordsFromServer  = () =>\n  axios.get(`${API_URL}/words`).then(r => r.data);\n\nexport const addWordOnServer       = (word) =>\n  axios.post(`${API_URL}/words`, word).then(r => r.data);\n\nexport const updateWordOnServer    = (word) =>\n  axios.put(`${API_URL}/words/${word.id}`, word).then(r => r.data);\n\nexport const deleteWordOnServer    = (id) =>\n  axios.delete(`${API_URL}/words/${id}`);\n\n/* ────────────── ADD (он-/офлайн) ────────────── */\nexport async function addWord(word) {\n  try {\n    const data = await addWordOnServer(word);       \n\n    if (data?.id != null) {\n      const withoutDup = getFromStorage(STORAGE_KEY_ADDED)\n        .filter(w => String(w.english).toLowerCase() !== word.english.toLowerCase());\n      setToStorage(STORAGE_KEY_ADDED, withoutDup);\n      return data;         \n    }\n  } catch (_) {\n  }\n\n  const entry  = { id: `local-${Date.now()}`, ...word };\n  const added  = getFromStorage(STORAGE_KEY_ADDED);\n  setToStorage(STORAGE_KEY_ADDED, [...added, entry]);\n  return entry;\n}\n\n/* ────────────── UPDATE ────────────── */\nexport async function updateWord(word) {\n  const data  = await updateWordOnServer(word);\n  const id    = typeof data.id === 'number' ? data.id : word.id;\n  const entry = { id, ...word };\n\n  const merged = getFromStorage(STORAGE_KEY_ADDED)\n    .filter(w => String(w.id) !== String(id));\n  setToStorage(STORAGE_KEY_ADDED, [...merged, entry]);\n  return entry;\n}\n\n/* ────────────── DELETE ────────────── */\nexport async function deleteWord(id) {\n  if (!String(id).startsWith('local-')) {\n    await deleteWordOnServer(id);\n  }\n\n  const kept   = getFromStorage(STORAGE_KEY_ADDED)\n    .filter(w => String(w.id) !== String(id));\n  setToStorage(STORAGE_KEY_ADDED, kept);\n\n  const deleted = getFromStorage(STORAGE_KEY_DELETED);\n  if (!deleted.includes(String(id))) {\n    setToStorage(STORAGE_KEY_DELETED, [...deleted, String(id)]);\n  }\n  return id;\n}\n\n/* ────────────── MERGED LIST ────────────── */\nexport async function fetchMergedWords() {\n  const server = await fetchWordsFromServer();\n  const deleted = getFromStorage(STORAGE_KEY_DELETED);\n  const added   = getFromStorage(STORAGE_KEY_ADDED);\n\n  const filtered = server.filter(w => !deleted.includes(String(w.id)));\n  const merged   = filtered.map(w =>\n    added.find(a => String(a.id) === String(w.id)) || w\n  );\n  const extras = added.filter(a =>\n    !filtered.find(w => String(w.id) === String(a.id))\n  );\n  return [...merged, ...extras];\n}\n"],"names":["ERROR_MESSAGES","min","concat","max","PATTERNS","ENGLISH_WORD","TRANSCRIPTION","RUSSIAN_WORD","validators","required","value","trim","englishWord","test","transcription","pure","replace","russianWord","minLength","length","maxLength","FIELDS","english","label","rules","russian","tags","AddWordForm","qc","useQueryClient","newWord","handleChange","resetForm","initial","values","setValues","useState","e","name","target","prev","_objectSpread","reset","useForm","Object","keys","reduce","a","k","errors","validateForm","schema","setErrors","validateField","useCallback","fieldName","rule","_values$fieldName","validator","error","result","forEach","useValidation","success","setSuccess","setError","touched","setTouched","mutation","useMutation","mutationFn","addWord","onMutate","async","_qc$getQueryData","cancelQueries","queryKey","QUERY_KEYS","WORDS_FULL","getQueryData","temp","word","id","Date","now","__temp","setQueryData","tempId","onError","_err","_word","ctx","onSuccess","_saved","arguments","undefined","filter","w","onSettled","invalidateQueries","_jsxs","onSubmit","preventDefault","mutate","className","styles","form","noValidate","children","entries","map","_ref","includes","showError","field","caption","_jsx","asterisk","onChange","input","errorInput","errorNote","type","disabled","isPending","button","buttonInactive","AddWordPage","addWordPage","title","formWrapper","MutationObserver","Subscribable","constructor","client","options","super","this","setOptions","bindMethods","updateResult","bind","_this$currentMutation","prevOptions","defaultMutationOptions","shallowEqualObjects","getMutationCache","notify","currentMutation","observer","onUnsubscribe","_this$currentMutation2","hasListeners","removeObserver","onMutationUpdate","action","notifyOptions","listeners","getCurrentResult","currentResult","variables","mutateOptions","build","addObserver","execute","state","getDefaultState","isLoading","status","isSuccess","isError","isIdle","notifyManager","batch","_this$mutateOptions$o","_this$mutateOptions","_this$mutateOptions$o2","_this$mutateOptions2","call","data","context","_this$mutateOptions$o3","_this$mutateOptions3","_this$mutateOptions$o4","_this$mutateOptions4","listener","arg1","arg2","arg3","React","queryClient","useSyncExternalStore","onStoreChange","subscribe","batchCalls","shouldThrowError","useErrorBoundary","noop","WORDS","TRAIN_WORDS","VOCAB_WORDS","getFromStorage","key","JSON","parse","localStorage","getItem","_unused","setToStorage","setItem","stringify","API_URL","process","STORAGE_KEY_ADDED","STORAGE_KEY_DELETED","fetchWordsFromServer","axios","get","then","r","addWordOnServer","post","updateWordOnServer","put","deleteWordOnServer","delete","withoutDup","String","toLowerCase","_","entry","added","updateWord","merged","deleteWord","startsWith","kept","deleted","fetchMergedWords","server","filtered","find"],"sourceRoot":""}