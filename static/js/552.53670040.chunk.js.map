{"version":3,"file":"static/js/552.53670040.chunk.js","mappings":"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","sources":["../node_modules/@tanstack/query-core/src/mutationObserver.ts","../node_modules/@tanstack/react-query/src/useMutation.ts","constants/queryKeys.js","utils/storage.js","api/words.js","webpack://english-flashcards/./src/components/words/WordRow/WordRow.module.scss?52dc","components/words/WordRow/WordRow.jsx","webpack://english-flashcards/./src/components/words/WordList/WordList.module.scss?2cce","components/words/WordList/WordList.jsx","hooks/words/useWordMutations.js","webpack://english-flashcards/./src/pages/HomePage/HomePage.module.scss?bae6","pages/HomePage/HomePage.jsx"],"sourcesContent":["import { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport { Subscribable } from './subscribable'\nimport { shallowEqualObjects } from './utils'\nimport type { QueryClient } from './queryClient'\nimport type {\n  MutateOptions,\n  MutationObserverBaseResult,\n  MutationObserverOptions,\n  MutationObserverResult,\n} from './types'\nimport type { Action, Mutation } from './mutation'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options\n    this.options = this.client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.currentMutation,\n        observer: this,\n      })\n    }\n    this.currentMutation?.setOptions(this.options)\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables:\n        typeof variables !== 'undefined' ? variables : this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    const isLoading = state.status === 'loading'\n    const result: MutationObserverBaseResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    > = {\n      ...state,\n      isLoading,\n      isPending: isLoading,\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n\n    this.currentResult = result as MutationObserverResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    >\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions && this.hasListeners()) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!,\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach(({ listener }) => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n","'use client'\nimport * as React from 'react'\nimport {\n  MutationObserver,\n  notifyManager,\n  parseMutationArgs,\n} from '@tanstack/query-core'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport { useQueryClient } from './QueryClientProvider'\nimport { shouldThrowError } from './utils'\nimport type { MutationFunction, MutationKey } from '@tanstack/query-core'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationFn: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  mutationFn?: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey' | 'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  arg1:\n    | MutationKey\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg2?:\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg3?: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const options = parseMutationArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient({ context: options.context })\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        queryClient,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.useErrorBoundary, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\n","export const QUERY_KEYS = {\n  // Основные запросы слов\n  WORDS: ['words'],\n  WORDS_FULL: ['wordsFull'],\n\n  // Тренировочные слова\n  TRAIN_WORDS: ['trainWords'],\n\n  // Словарный запас\n  VOCAB_WORDS: ['vocabWords'],\n}","/**\n * Утилиты для работы с localStorage\n */\nexport function getFromStorage(key) {\n  try {\n    return JSON.parse(localStorage.getItem(key)) || [];\n  } catch {\n    return [];\n  }\n}\n\nexport function setToStorage(key, data) {\n  localStorage.setItem(key, JSON.stringify(data));\n}\n","import axios from 'axios'\nimport { getFromStorage, setToStorage } from '../utils/storage'\n\nconst API_URL = process.env.REACT_APP_API_URL\n\nexport const STORAGE_KEY_ADDED   = 'addedWords'\nexport const STORAGE_KEY_DELETED = 'deletedWords'\n\nexport function fetchWordsFromServer() {\n  return axios.get(`${API_URL}/words`).then(res => res.data)\n}\nexport function addWordOnServer(word) {\n  return axios.post(`${API_URL}/words`, word).then(res => res.data)\n}\nexport function updateWordOnServer(word) {\n  return axios.put(`${API_URL}/words/${word.id}`, word).then(res => res.data)\n}\nexport function deleteWordOnServer(id) {\n  return axios.delete(`${API_URL}/words/${id}`)\n}\n\n/**\n * Обёртка: POST + локальное сохранение\n */\nexport async function addWord(word) {\n  const data = await addWordOnServer(word)\n  const id   = typeof data.id === 'number' ? data.id : `local-${Date.now()}`\n  const entry = { id, ...word }\n\n  const added = getFromStorage(STORAGE_KEY_ADDED)\n  setToStorage(STORAGE_KEY_ADDED, [...added, entry])\n\n  return entry\n}\n\n/**\n * Обёртка: PUT + локальная синхронизация\n */\nexport async function updateWord(word) {\n  const data = await updateWordOnServer(word)\n  const id   = typeof data.id === 'number' ? data.id : word.id\n  const entry = { id, ...word }\n\n  const added = getFromStorage(STORAGE_KEY_ADDED)\n    .filter(w => String(w.id) !== String(id))\n  setToStorage(STORAGE_KEY_ADDED, [...added, entry])\n\n  return entry\n}\n\n/**\n * Обёртка: DELETE + учёт удалённых\n */\nexport async function deleteWord(id) {\n  if (!String(id).startsWith('local-')) {\n    await deleteWordOnServer(id)\n  }\n\n  const added = getFromStorage(STORAGE_KEY_ADDED)\n    .filter(w => String(w.id) !== String(id))\n  setToStorage(STORAGE_KEY_ADDED, added)\n\n  const deleted = getFromStorage(STORAGE_KEY_DELETED)\n  if (!deleted.includes(String(id))) {\n    setToStorage(STORAGE_KEY_DELETED, [...deleted, String(id)])\n  }\n\n  return id\n}\n\n/**\n * Получить «слитые» слова:\n * — серверные без удалённых\n * — заменённые локальными\n * — добавленные локально\n */\nexport async function fetchMergedWords() {\n  const serverWords = await fetchWordsFromServer()\n  const deleted     = getFromStorage(STORAGE_KEY_DELETED)\n  const added       = getFromStorage(STORAGE_KEY_ADDED)\n\n  const filtered = serverWords.filter(w => !deleted.includes(String(w.id)))\n  const merged   = filtered.map(w =>\n    added.find(a => String(a.id) === String(w.id)) || w\n  )\n  const extras   = added.filter(a =>\n    !filtered.find(w => String(w.id) === String(a.id))\n  )\n\n  return [...merged, ...extras]\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"row\":\"WordRow_row__4-rHQ\",\"input\":\"WordRow_input__dVTgS\",\"errorInput\":\"WordRow_errorInput__SwX5M\",\"actions\":\"WordRow_actions__9BBdR\",\"button\":\"WordRow_button__vftN3\"};","import React, { useState, useEffect } from 'react';\nimport styles from './WordRow.module.scss';\n\nexport default function WordRow({ word, onSave, onDelete }) {\n  const [isEditing, setIsEditing] = useState(false);\n  const [edited, setEdited]       = useState(word);\n\n  const englishInvalid       = isEditing && !edited.english.trim();\n  const transcriptionInvalid = isEditing && !edited.transcription.trim();\n  const russianInvalid       = isEditing && !edited.russian.trim();\n  const tagsInvalid          = isEditing && !(edited.tags?.trim());\n\n  // при входе в режим редактирования копируем текущее слово\n  useEffect(() => {\n    if (isEditing) setEdited(word);\n  }, [isEditing, word]);\n\n  // обновляем состояние при вводе\n  const handleChange = e => {\n    const { name, value } = e.target;\n    setEdited(prev => ({ ...prev, [name]: value }));\n  };\n\n  // сохранить\n  const handleSave = () => {\n    if (englishInvalid || transcriptionInvalid || russianInvalid) {\n      alert('Ошибка: заполните все обязательные поля перед сохранением');\n      return;\n    }\n    console.log('Сохранено слово:', edited);\n    onSave(edited);\n    setIsEditing(false);\n  };\n\n  // отменить\n  const handleCancel = () => {\n    setIsEditing(false);\n    setEdited(word);\n  };\n\n  // Enter = сохранить\n  const handleKeyDown = e => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      handleSave();\n    }\n  };\n\n  return (\n    <tr className={styles.row}>\n      {isEditing ? (\n        <>\n          <td>\n            <input\n              name=\"english\"\n              value={edited.english}\n              onChange={handleChange}\n              onKeyDown={handleKeyDown}\n              className={`${styles.input} ${englishInvalid ? styles.errorInput : ''}`}\n            />\n          </td>\n          <td>\n            <input\n              name=\"transcription\"\n              value={edited.transcription}\n              onChange={handleChange}\n              onKeyDown={handleKeyDown}\n              className={`${styles.input} ${transcriptionInvalid ? styles.errorInput : ''}`}\n            />\n          </td>\n          <td>\n            <input\n              name=\"russian\"\n              value={edited.russian}\n              onChange={handleChange}\n              onKeyDown={handleKeyDown}\n              className={`${styles.input} ${russianInvalid ? styles.errorInput : ''}`}\n            />\n          </td>\n          <td>\n            <input\n              name=\"tags\"\n              value={edited.tags || ''}\n              onChange={handleChange}\n              onKeyDown={handleKeyDown}\n              className={`${styles.input} ${tagsInvalid ? styles.errorInput : ''}`}\n            />\n          </td>\n          <td className={styles.actions}>\n            <button\n              onClick={handleSave}\n              className={styles.button}\n              disabled={englishInvalid || transcriptionInvalid || russianInvalid}\n            >\n              💾\n            </button>\n            <button onClick={handleCancel} className={styles.button}>❌</button>\n          </td>\n        </>\n      ) : (\n        <>\n          <td>{word.english}</td>\n          <td>{word.transcription}</td>\n          <td>{word.russian}</td>\n          <td>{word.tags}</td>\n          <td className={styles.actions}>\n            <button onClick={() => setIsEditing(true)} className={styles.button}>✏️</button>\n            <button onClick={onDelete} className={styles.button}>🗑</button>\n          </td>\n        </>\n      )}\n    </tr>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"table\":\"WordList_table__9l5tk\"};","import React from 'react'\nimport { useQuery } from '@tanstack/react-query'\nimport { QUERY_KEYS } from '../../../constants/queryKeys'\nimport { fetchMergedWords } from '../../../api/words'\nimport { useWordMutations } from '../../../hooks/words/useWordMutations'\nimport WordRow from '../WordRow/WordRow'\nimport Spinner from '../../Spinner/Spinner'\nimport styles from './WordList.module.scss'\n\nexport default function WordList() {\n  const { deleteWord, updateWord } = useWordMutations()\n\n  const { data: words = [], isLoading } = useQuery({\n    queryKey: QUERY_KEYS.WORDS_FULL,\n    queryFn: fetchMergedWords,\n    staleTime: 300_000,\n    refetchOnWindowFocus: false,\n  })\n\n  if (isLoading) {\n    return <Spinner />\n  }\n\n  return (\n    <table className={styles.table}>\n      <thead>\n        <tr>\n          <th>Слово</th>\n          <th>Транскрипция</th>\n          <th>Перевод</th>\n          <th>Тема</th>\n          <th>Действия</th>\n        </tr>\n      </thead>\n      <tbody>\n        {words.map(w => (\n          <WordRow\n            key={w.id}\n            word={w}\n            onDelete={() => deleteWord(w.id)}\n            onSave={updated => updateWord(updated)}\n          />\n        ))}\n      </tbody>\n    </table>\n  )\n}\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\nimport { QUERY_KEYS }   from '../../constants/queryKeys'\nimport {\n  deleteWord   as apiDeleteWord,\n  updateWord   as apiUpdateWord,\n} from '../../api/words'\n\nexport function useWordMutations() {\n  const qc = useQueryClient()\n\n  const deleteMutation = useMutation({\n    mutationFn: apiDeleteWord,\n    onSuccess: () => {\n      qc.invalidateQueries({ queryKey: QUERY_KEYS.WORDS_FULL })\n      qc.invalidateQueries({ queryKey: QUERY_KEYS.TRAIN_WORDS })\n      qc.invalidateQueries({ queryKey: QUERY_KEYS.VOCAB_WORDS })\n    },\n  })\n\n  const updateMutation = useMutation({\n    mutationFn: apiUpdateWord,\n    onSuccess: () => {\n      qc.invalidateQueries({ queryKey: QUERY_KEYS.WORDS_FULL })\n      qc.invalidateQueries({ queryKey: QUERY_KEYS.TRAIN_WORDS })\n      qc.invalidateQueries({ queryKey: QUERY_KEYS.VOCAB_WORDS })\n    },\n  })\n\n  return {\n    deleteWord: deleteMutation.mutate,\n    updateWord: updateMutation.mutate,\n    isDeleting: deleteMutation.isLoading,\n    isUpdating: updateMutation.isLoading,\n    deleteError: deleteMutation.error,\n    updateError: updateMutation.error,\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"homePage\":\"HomePage_homePage__FhwvF\",\"title\":\"HomePage_title__ygULj\"};","import React from 'react';\nimport WordList from '../../components/words/WordList/WordList';\nimport styles from './HomePage.module.scss';\n\nfunction HomePage() {\n  return (\n    <div className={styles.homePage}>\n      <h2 className={styles.title}>Список слов</h2>\n      <WordList />\n    </div>\n  );\n}\n\nexport default HomePage;\n"],"names":["MutationObserver","Subscribable","constructor","client","options","super","this","setOptions","bindMethods","updateResult","mutate","bind","reset","_this$currentMutation","prevOptions","defaultMutationOptions","shallowEqualObjects","getMutationCache","notify","type","mutation","currentMutation","observer","onUnsubscribe","_this$currentMutation2","hasListeners","removeObserver","onMutationUpdate","action","notifyOptions","listeners","onSuccess","onError","getCurrentResult","currentResult","undefined","variables","mutateOptions","build","_objectSpread","addObserver","execute","state","getDefaultState","isLoading","status","result","isPending","isSuccess","isError","isIdle","notifyManager","batch","_this$mutateOptions$o","_this$mutateOptions","_this$mutateOptions$o2","_this$mutateOptions2","call","data","context","onSettled","_this$mutateOptions$o3","_this$mutateOptions3","_this$mutateOptions$o4","_this$mutateOptions4","error","forEach","_ref","listener","useMutation","arg1","arg2","arg3","React","queryClient","useSyncExternalStore","onStoreChange","subscribe","batchCalls","shouldThrowError","useErrorBoundary","noop","QUERY_KEYS","WORDS","WORDS_FULL","TRAIN_WORDS","VOCAB_WORDS","getFromStorage","key","JSON","parse","localStorage","getItem","_unused","setToStorage","setItem","stringify","API_URL","process","STORAGE_KEY_ADDED","STORAGE_KEY_DELETED","async","addWord","word","axios","post","concat","then","res","addWordOnServer","id","Date","now","entry","added","updateWord","put","updateWordOnServer","filter","w","String","deleteWord","startsWith","delete","deleteWordOnServer","deleted","includes","fetchMergedWords","serverWords","get","filtered","map","find","a","WordRow","_edited$tags","onSave","onDelete","isEditing","setIsEditing","useState","edited","setEdited","englishInvalid","english","trim","transcriptionInvalid","transcription","russianInvalid","russian","tagsInvalid","tags","useEffect","handleChange","e","name","value","target","prev","handleSave","alert","console","log","handleKeyDown","preventDefault","_jsx","className","styles","children","_jsxs","_Fragment","onChange","onKeyDown","onClick","disabled","handleCancel","WordList","qc","useQueryClient","deleteMutation","mutationFn","apiDeleteWord","invalidateQueries","queryKey","updateMutation","apiUpdateWord","isDeleting","isUpdating","deleteError","updateError","useWordMutations","words","useQuery","queryFn","staleTime","refetchOnWindowFocus","Spinner","updated"],"sourceRoot":""}