{"version":3,"file":"static/js/347.add83bd4.chunk.js","mappings":"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","sources":["webpack://english-flashcards/./src/components/words/WordCard/WordCard.module.scss?a298","components/words/WordCard/WordCard.jsx","webpack://english-flashcards/./src/components/words/FlipCardGame/FlipCardGame.module.scss?1d12","components/words/FlipCardGame/FlipCardGame.jsx","utils/shuffle.js","hooks/useTestGameLogic.js","hooks/useWordNavigation.js","hooks/useOptions.js","webpack://english-flashcards/./src/components/words/TestGame/TestGame.module.scss?a87f","components/words/TestGame/TestGameUI.jsx","components/words/TestGame/TestGame.jsx","webpack://english-flashcards/./src/pages/TrainPage/TrainPage.module.scss?4399","pages/TrainPage/TrainPage.jsx","hooks/useProgress.js","api/words.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"cardWrapper\":\"WordCard_cardWrapper__jHn87\",\"card\":\"WordCard_card__jVwgg\",\"isFlipped\":\"WordCard_isFlipped__ACnbb\",\"cardFront\":\"WordCard_cardFront__tkZO+\",\"cardBack\":\"WordCard_cardBack__iZQ0q\",\"english\":\"WordCard_english__5kBOo\",\"transcription\":\"WordCard_transcription__YMEiV\",\"translation\":\"WordCard_translation__xCCyt\"};","import React, { useState } from 'react'\nimport styles from './WordCard.module.scss'\n\nexport default function WordCard({ english, transcription, russian }) {\n  const [flipped, setFlipped] = useState(false)\n\n  return (\n    <div className={styles.cardWrapper} onClick={() => setFlipped(f => !f)}>\n      <div className={`${styles.card} ${flipped ? styles.isFlipped : ''}`}>\n        <div className={styles.cardFront}>\n          <p className={styles.english}>{english}</p>\n          <p className={styles.transcription}>{transcription}</p>\n        </div>\n        <div className={styles.cardBack}>\n          <p className={styles.translation}>{russian}</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"FlipCardGame_container__9peXM\",\"cardWrapper\":\"FlipCardGame_cardWrapper__e66if\",\"cardMotion\":\"FlipCardGame_cardMotion__ovtHr\",\"checkButton\":\"FlipCardGame_checkButton__427CO\",\"controls\":\"FlipCardGame_controls__-ewaO\",\"status\":\"FlipCardGame_status__0RBR1\"};","import React, { useState, useEffect, useCallback } from 'react'\nimport { motion, AnimatePresence }     from 'framer-motion'\nimport { useQueryClient }              from '@tanstack/react-query'\nimport { useProgress }                 from '../../../hooks/useProgress'\nimport WordCard                        from '../WordCard/WordCard'\nimport styles                          from './FlipCardGame.module.scss'\n\nexport default function FlipCardGame({ words }) {\n  const [idx, setIdx]           = useState(0)     \n  const [direction, setDirection] = useState(1)   \n  const [marked, setMarked]     = useState(false) \n\n  const qc = useQueryClient()\n\n  const safeIndex =\n    Array.isArray(words) && words.length > 0 ? Math.min(idx, words.length - 1) : 0\n\n  const currentWord =\n    Array.isArray(words) && words.length > 0\n      ? words[safeIndex]\n      : { id: null, english: '', transcription: '', russian: '' }\n\n  const [progress, saveProgress] = useProgress(currentWord.id ?? '')\n\n  const goPrev = useCallback(() => {\n    if (!Array.isArray(words) || words.length === 0) return\n    if (safeIndex === 0) return\n    setDirection(-1)\n    setIdx(i => i - 1)\n  }, [safeIndex, words])\n\n  const goNext = useCallback(() => {\n    if (!Array.isArray(words) || words.length === 0) return\n    if (safeIndex === words.length - 1) return\n    setDirection(1)\n    setIdx(i => i + 1)\n  }, [safeIndex, words])\n\n  function handleMarkKnown() {\n    saveProgress({ knownByUser: true })\n    qc.invalidateQueries(['trainWords'])\n    qc.invalidateQueries(['vocabWords'])\n    setMarked(true)\n  }\n\n  useEffect(() => {\n    function onKey(e) {\n      if (e.key === 'ArrowLeft') {\n        e.preventDefault()\n        goPrev()\n      } else if (e.key === 'ArrowRight') {\n        e.preventDefault()\n        goNext()\n      }\n    }\n    window.addEventListener('keydown', onKey)\n    return () => window.removeEventListener('keydown', onKey)\n  }, [goPrev, goNext]) \n\n  const variants = {\n    enter: dir => ({\n      rotateY: dir > 0 ? 90 : -90,\n      opacity: 0,\n      transformOrigin: dir > 0 ? 'left center' : 'right center',\n    }),\n    center: {\n      rotateY: 0,\n      opacity: 1,\n      transformOrigin: 'center center',\n      transition: { duration: 0.5 },\n    },\n    exit: dir => ({\n      rotateY: dir > 0 ? -90 : 90,\n      opacity: 0,\n      transformOrigin: dir > 0 ? 'right center' : 'left center',\n      transition: { duration: 0.4 },\n    }),\n  }\n\n  function handleAnimationComplete(definition) {\n    if (marked && definition === 'exit') {\n      setMarked(false)\n      goNext()\n    }\n  }\n\n  return (\n    <div className={styles.container}>\n      {!Array.isArray(words) || words.length === 0 ? (\n        <p className={styles.status}>Нет слов для тренировки.</p>\n      ) : (\n        <>\n          <div className={styles.cardWrapper}>\n            <AnimatePresence initial={false} custom={direction}>\n              <motion.div\n                key={currentWord.id}\n                custom={direction}\n                variants={variants}\n                initial=\"enter\"\n                animate={marked ? 'exit' : 'center'}\n                exit=\"exit\"\n                transition={{ duration: 0.5 }}\n                className={styles.cardMotion}\n                onAnimationComplete={handleAnimationComplete}\n              >\n                <WordCard\n                  english={currentWord.english}\n                  transcription={currentWord.transcription}\n                  russian={currentWord.russian}\n                />\n              </motion.div>\n            </AnimatePresence>\n          </div>\n\n          <button\n            className={styles.checkButton}\n            onClick={handleMarkKnown}\n            disabled={marked}\n          >\n            Отметить как знаю\n          </button>\n\n          <div className={styles.controls}>\n            <button onClick={goPrev} disabled={safeIndex === 0}>\n              ←\n            </button>\n            <button onClick={goNext} disabled={safeIndex === words.length - 1}>\n              →\n            </button>\n          </div>\n        </>\n      )}\n    </div>\n  )\n}\n","/**\n * Простая функция для случайного перемешивания массива\n * @param {Array} arr — входной массив\n * @returns {Array} — новый массив с теми же элементами, но в случайном порядке\n */\n\nexport default function shuffle(arr) {\n  return arr\n    .map(v => ({ sort: Math.random(), value: v }))\n    .sort((a, b) => a.sort - b.sort)\n    .map(o => o.value)\n}\n","import { useState, useEffect, useCallback } from 'react'\nimport { useQuery, useQueryClient } from '@tanstack/react-query'\nimport { fetchMergedWords } from '../api/words'\nimport { useProgress } from './useProgress'\nimport { useOptions } from './useOptions'\nimport { useWordNavigation } from './useWordNavigation'\n\n/**\n * useTestGameLogic — хук, который инкапсулирует всю логику TestGame:\n *  • загрузка allWords через React Query\n *  • навигация по тренировочным словам\n *  • подсчёт прогресса (useProgress)\n *  • формирование options и correctAnswer (useOptions)\n *  • обработка выбора варианта (handleSelect)\n *  • обработка клика по экрану (handleScreenClick)\n */\n\nexport function useTestGameLogic(words) {\n  const qc = useQueryClient()\n\n  const [celebrating, setCelebrating] = useState(false)\n  const [displayedStreak, setDisplayedStreak] = useState(null)\n  const [selected, setSelected] = useState(null)\n  const [isCorrect, setIsCorrect] = useState(null)\n  const [direction, setDirection] = useState('en-ru')\n\n  const {\n    data: allWords = [],\n    isLoading: allLoading,\n    isError: allError,\n  } = useQuery(['wordsFull'],fetchMergedWords,{\n      refetchOnWindowFocus: false,\n      staleTime: 5 * 60_000,\n    }\n  )\n\n  const { empty, safeIndex, word, currentId, next, reset } =\n    useWordNavigation(words)\n\n  useEffect(() => {\n    setCelebrating(false)\n    setDisplayedStreak(null)\n    setSelected(null)\n    setIsCorrect(null)\n  }, [currentId])\n\n  const [progress, saveProgress] = useProgress(currentId)\n  const { correctStreak = 0, knownByUser = false } = progress\n\n  const { options, correctAnswer } = useOptions(\n    allWords,\n    words,\n    safeIndex,\n    direction\n  )\n\n  const handleClearSelection = useCallback(() => {\n    setSelected(null)\n    setIsCorrect(null)\n    setCelebrating(false)\n    setDisplayedStreak(null)\n  }, [])\n\n  const invalidateTrainAndVocab = useCallback(() => {\n    qc.invalidateQueries({\n      predicate: query =>\n        ['trainWords', 'vocabWords'].includes(query.queryKey[0]),\n    })\n  }, [qc])\n\n  const handleSelect = useCallback(\n    choice => {\n      if (selected !== null) return\n      setSelected(choice)\n\n      const isCorrectChoice = choice.toLowerCase() === correctAnswer\n      setIsCorrect(isCorrectChoice)\n\n      const nextStreak = isCorrectChoice ? correctStreak + 1 : 0\n      const update = { correctStreak: nextStreak }\n      if (nextStreak >= 5) update.knownByUser = true\n\n      saveProgress(update)\n\n      if (isCorrectChoice && nextStreak >= 5) {\n        setCelebrating(true)\n        setDisplayedStreak(nextStreak)\n      } else {\n        invalidateTrainAndVocab()\n      }\n    },\n    [\n      selected,\n      correctAnswer,\n      correctStreak,\n      saveProgress,\n      invalidateTrainAndVocab,\n    ]\n  )\n\n  const handleScreenClick = useCallback(() => {\n    if (!celebrating) return\n    setCelebrating(false)\n    setDisplayedStreak(null)\n    setSelected(null)\n    setIsCorrect(null)\n    invalidateTrainAndVocab()\n  }, [celebrating, invalidateTrainAndVocab])\n\n  const rawCount = displayedStreak ?? correctStreak\n  const displayCount = Math.min(rawCount, 5)\n\n  return {\n    isLoading: allLoading,\n    isError: allError,\n    empty,\n    word,\n    safeIndex,\n    direction,\n    setDirection,\n    options,\n    correctAnswer,\n    selected,\n    isCorrect,\n    rawCount,\n    displayCount,\n    celebrating,\n    handleSelect,\n    handleScreenClick,\n    handleClearSelection,\n    next,\n    reset,\n  }\n}","import { useState, useEffect } from 'react'\n\n/**\n * useWordNavigation — хук, который хранит текущий индекс, \n * вычисляет безопасный индекс и текущее слово, а также даёт функции\n * для перехода к следующему и сброса навигации.\n *\n * @param {Array} words — массив слов (каждый элемент {id, english, russian, …})\n * @returns {{\n *   safeIndex: number,   // индекс, не выходящий за границы массива\n *   word: object|null,   // текущее слово или null\n *   currentId: number|null, // id текущего слова\n *   next: () => void,    // функция «следующее слово»\n *   reset: () => void    // функция «начать сначала»\n * }}\n */\n\nexport function useWordNavigation(words) {\n  const [index, setIndex] = useState(0)\n\n  const empty = !Array.isArray(words) || words.length === 0\n  const safeIndex = empty ? 0 : Math.min(index, words.length - 1)\n  const word = empty ? null : words[safeIndex]\n  const currentId = word?.id ?? null\n\n  useEffect(() => {\n    setIndex(0)\n  }, [words])\n\n  const next = () => {\n    if (empty) return\n    setIndex(prev => {\n      return prev < words.length - 1 ? prev + 1 : prev\n    })\n  }\n\n  const reset = () => {\n    setIndex(0)\n  }\n\n  return { safeIndex, word, currentId, next, reset, empty }\n}\n","import { useMemo } from 'react'\nimport shuffle from '../utils/shuffle'\n\n/**\n * useOptions — принимает:\n *   - allWords: полный массив слов (в том числе не только тренировочных)\n *   - words:   массив текущих «тренировочных» слов (откуда берётся слово по safeIndex)\n *   - safeIndex: индекс текущего слова в массиве words\n *   - direction: 'en-ru' или 'ru-en'\n *\n * Возвращает:\n *   - options: массив из 4 вариантов (правильный + 3 «отвлекающих»), уже случайно перемешанный\n *   - correctAnswer: правильное значение (низкий регистр, для простого сравнения)\n */\n\nexport function useOptions(allWords, words, safeIndex, direction) {\n  return useMemo(() => {\n    if (\n      !Array.isArray(words) ||\n      words.length === 0 ||\n      safeIndex < 0 ||\n      safeIndex >= words.length\n    ) {\n      return { options: [], correctAnswer: null }\n    }\n\n    const word = words[safeIndex]\n    if (!word || !Array.isArray(allWords) || allWords.length === 0) {\n      return { options: [], correctAnswer: null }\n    }\n\n    const pool = allWords\n      .filter(w => w.id !== word.id)\n      .map(w => (direction === 'en-ru' ? w.russian : w.english))\n\n    const distractors = shuffle(pool).slice(0, 3)\n\n    const correctVal = direction === 'en-ru' ? word.russian : word.english\n\n    const options = shuffle([correctVal, ...distractors])\n\n    return {\n      options,\n      correctAnswer: correctVal.toLowerCase(),\n    }\n  }, [allWords, words, safeIndex, direction])\n}","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"TestGame_container__W4QCg\",\"toggle\":\"TestGame_toggle__d5eTu\",\"active\":\"TestGame_active__5REuC\",\"prompt\":\"TestGame_prompt__D27ei\",\"status\":\"TestGame_status__yVXDb\",\"progress\":\"TestGame_progress__vcjdz\",\"options\":\"TestGame_options__NDWIb\",\"correct\":\"TestGame_correct__afOdp\",\"wrong\":\"TestGame_wrong__N3fIA\",\"footer\":\"TestGame_footer__jXnw9\",\"ok\":\"TestGame_ok__hxm7a\",\"err\":\"TestGame_err__fUU1S\",\"nextButton\":\"TestGame_nextButton__BTOoP\",\"resetButton\":\"TestGame_resetButton__dw-D+\",\"celebration\":\"TestGame_celebration__YTn-x\",\"pop\":\"TestGame_pop__X1akE\"};","import React from 'react'\nimport Spinner from '../../Spinner/Spinner'\nimport styles from './TestGame.module.scss'\n\nexport function TestGameUI(props) {\n  const {\n    isLoading,\n    isError,\n    empty,\n    word,\n    direction,\n    setDirection,\n    options,\n    correctAnswer,\n    selected,\n    isCorrect,\n    rawCount,\n    displayCount,\n    celebrating,\n    handleSelect,\n    handleScreenClick,\n    next,\n    reset,\n    safeIndex,\n    wordsLength,\n    handleClearSelection,\n  } = props\n\n  if (isLoading) {\n    return <Spinner />\n  }\n  if (isError) {\n    return <p className={styles.status}>Ошибка загрузки вариантов</p>\n  }\n  if (empty || (props.knownByUser && !celebrating)) {\n    return <Spinner />\n  }\n\n  return (\n    <div className={styles.container} onClick={handleScreenClick}>\n      <div className={styles.toggle}>\n        <button\n          className={direction === 'en-ru' ? styles.active : ''}\n          onClick={() => setDirection('en-ru')}\n        >\n          Англ → Рус\n        </button>\n        <button\n          className={direction === 'ru-en' ? styles.active : ''}\n          onClick={() => setDirection('ru-en')}\n        >\n          Рус → Англ\n        </button>\n      </div>\n\n      <p className={styles.prompt}>\n        {direction === 'en-ru' ? word.english : word.russian}\n      </p>\n\n      <div className={styles.progress}>\n        <progress value={displayCount} max={5} />\n        <span>{displayCount}/5</span>\n      </div>\n\n      <div className={styles.options}>\n        {options.map(opt => (\n          <button\n            key={opt}\n            disabled={selected !== null || celebrating}\n            onClick={e => {\n              e.stopPropagation()\n              handleSelect(opt)\n            }}\n            className={\n              selected === null\n                ? ''\n                : opt.toLowerCase() === correctAnswer\n                ? styles.correct\n                : opt === selected\n                ? styles.wrong\n                : ''\n            }\n          >\n            {opt}\n          </button>\n        ))}\n      </div>\n\n      {celebrating && (\n        <div className={styles.celebration}>\n          🎉🎆 Отлично! Слово выучено! 🎆🎉\n        </div>\n      )}\n\n      {!celebrating && selected !== null && (\n        <div className={styles.footer}>\n          <p className={isCorrect ? styles.ok : styles.err}>\n            {isCorrect\n              ? '✅ Правильно!'\n              : `❌ Неверно, ответ: ${\n                  direction === 'en-ru' ? word.russian : word.english\n                }`}\n          </p>\n\n          <button\n            onClick={() => {\n              handleClearSelection()\n              next()\n            }}\n            disabled={safeIndex === wordsLength - 1}\n            className={styles.nextButton}\n          >\n            Следующее →\n          </button>\n\n          {safeIndex === wordsLength - 1 && (\n            <button \n              onClick={() => {\n                handleClearSelection()\n                reset()\n              }}\n              className={styles.resetButton}\n            >\n              Начать сначала\n            </button>\n          )}\n        </div>\n      )}\n    </div>\n  )\n}","import React from 'react'\nimport { useTestGameLogic } from '../../../hooks/useTestGameLogic'\nimport { TestGameUI } from './TestGameUI'\n\nexport default function TestGame({ words }) {\n  const logic = useTestGameLogic(words)\n\n  return <TestGameUI {...logic} wordsLength={words.length} />\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"page\":\"TrainPage_page__AVj1k\",\"backToMenu\":\"TrainPage_backToMenu__-9L1e\",\"title\":\"TrainPage_title__L3Yo3\",\"selection\":\"TrainPage_selection__pdbK7\",\"largeButton\":\"TrainPage_largeButton__Xu2N9\",\"status\":\"TrainPage_status__84YyE\",\"emptyActions\":\"TrainPage_emptyActions__otEk2\",\"linkButton\":\"TrainPage_linkButton__dh8CD\"};","import React, { useState } from 'react'\nimport { useQuery }        from '@tanstack/react-query'\nimport { Link }            from 'react-router-dom'\nimport { fetchMergedWords, STORAGE_KEY_DELETED } from '../../api/words'\nimport FlipCardGame        from '../../components/words/FlipCardGame/FlipCardGame'\nimport TestGame            from '../../components/words/TestGame/TestGame'\nimport styles              from './TrainPage.module.scss'\n\n/**\n * Берём все слова (API + локалка),\n * отфильтровываем:\n *  — изученные (knownByUser)\n *  — удалённые (deletedWords)\n */\n\nasync function fetchTrainWords() {\n  const all     = await fetchMergedWords()\n  const prog    = JSON.parse(localStorage.getItem('vocabProgress') || '{}')\n  const deleted = JSON.parse(localStorage.getItem(STORAGE_KEY_DELETED) || '[]')\n\n  return all.filter(w =>\n    !prog[w.id]?.knownByUser &&\n    !deleted.includes(String(w.id))\n  )\n}\n\nexport default function TrainPage() {\n  const [mode, setMode] = useState(null)\n\n  const { data: trainWords = [], isLoading, isError } = useQuery(\n    ['trainWords', mode],\n    fetchTrainWords,\n    {\n      enabled: Boolean(mode),\n      refetchOnWindowFocus: false,\n      staleTime: 5 * 60_000,\n    }\n  )\n\n  if (mode === null) {\n    return (\n      <div className={styles.page}>\n        <h2 className={styles.title}>Выберите режим</h2>\n        <div className={styles.selection}>\n          <button className={styles.largeButton} onClick={() => setMode('flip')}>\n            Переверни карточку\n          </button>\n          <button className={styles.largeButton} onClick={() => setMode('test')}>\n            Тест\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  if (isLoading) return <p className={styles.status}>Загрузка слов…</p>\n  if (isError)   return <p className={styles.status}>Ошибка при загрузке</p>\n\n  if (trainWords.length === 0) {\n    return (\n      <div className={styles.page}>\n        <h2 className={styles.status}>Поздравляем, все слова выучены! 🎉</h2>\n        <div className={styles.emptyActions}>\n          <Link to=\"/vocab\" className={styles.linkButton}>Мой словарный запас</Link>\n          <Link to=\"/add\"   className={styles.linkButton}>Добавить новые слова</Link>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className={styles.page}>\n      <button className={styles.backToMenu} onClick={() => setMode(null)}>\n        ← Назад к выбору режима\n      </button>\n      {mode === 'flip'\n        ? <FlipCardGame words={trainWords} />\n        : <TestGame     words={trainWords} />\n      }\n    </div>\n  )\n}\n","import { useState, useEffect } from 'react'\n\nconst STORAGE_KEY = 'vocabProgress'\nconst DEFAULT = { correctStreak: 0, knownByUser: false }\n\n/**\n * Хук хранит для каждого wordId:\n *  - correctStreak: сколько раз подряд угадано в тесте\n *  - knownByUser\n *\n * Возвращает [state, saveProgress, resetProgress]\n */\nexport function useProgress(wordId) {\n  const [state, setState] = useState(DEFAULT)\n\n  useEffect(() => {\n    const all = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}')\n    setState(all[wordId] || DEFAULT)\n  }, [wordId])\n\n  const saveProgress = updates => {\n    setState(prev => {\n      const next = { ...prev, ...updates }\n      const all  = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}')\n      all[wordId] = next\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(all))\n      return next\n    })\n  }\n\n  const resetProgress = () => {\n    setState(DEFAULT)\n    const all = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}')\n    delete all[wordId]\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(all))\n  }\n\n  return [state, saveProgress, resetProgress]\n}\n\n/**\n * Глобальная функция для сброса прогресса вне компонента\n */\nexport function resetProgress(wordId) {\n  const all = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}')\n  delete all[wordId]\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(all))\n}\n","import axios from 'axios'\n\nconst API_URL = process.env.REACT_APP_API_URL\n\nexport const STORAGE_KEY_ADDED   = 'addedWords'\nexport const STORAGE_KEY_DELETED = 'deletedWords'\n\n/**\n * Получаем данные с сервера (без учёта локальных изменений)\n */\nexport function fetchWordsFromServer() {\n  return axios\n    .get(`${API_URL}/words`)\n    .then(res => res.data)\n}\n\n/**\n * Добавляем новое слово\n */\nexport function addWordOnServer(word) {\n  return axios\n    .post(`${API_URL}/words`, word)\n    .then(res => res.data)\n}\n\n/**\n * Обновляем слово на сервере\n */\nexport function updateWordOnServer(word) {\n  return axios\n    .put(`${API_URL}/words/${word.id}`, word)\n    .then(res => res.data)\n}\n\n/**\n * Удаляем слово на сервере\n */\nexport function deleteWordOnServer(id) {\n  return axios.delete(`${API_URL}/words/${id}`)\n}\n\n/**\n * Обёртка: POST + локальное сохранение\n */\nexport async function addWord(word) {\n  const data = await addWordOnServer(word)\n  const id = typeof data.id === 'number' ? data.id : `local-${Date.now()}`\n\n  const entry = {\n    id,\n    english: word.english,\n    transcription: word.transcription,\n    russian: word.russian,\n    tags: word.tags\n  }\n\n  const stored = JSON.parse(localStorage.getItem(STORAGE_KEY_ADDED) || '[]')\n  localStorage.setItem(\n    STORAGE_KEY_ADDED,\n    JSON.stringify([...stored, entry])\n  )\n\n  return entry\n}\n\n/**\n * Обёртка: PUT + локальная синхронизация (для редактирования локальных слов)\n */\nexport async function updateWord(word) {\n  const data = await updateWordOnServer(word)\n  const id = typeof data.id === 'number' ? data.id : word.id\n\n  const entry = {\n    id,\n    english:      word.english,\n    transcription: word.transcription,\n    russian:      word.russian,\n    tags:         word.tags\n  }\n\n  const stored = JSON.parse(localStorage.getItem(STORAGE_KEY_ADDED) || '[]')\n    .filter(w => String(w.id) !== String(id))\n  localStorage.setItem(\n    STORAGE_KEY_ADDED,\n    JSON.stringify([...stored, entry])\n  )\n\n  return entry\n}\n\n/**\n * Обёртка: DELETE + пометка в deletedWords\n */\nexport async function deleteWord(id) {\n  if (!String(id).startsWith('local-')) {\n    await deleteWordOnServer(id)\n  }\n\n  const added = JSON.parse(localStorage.getItem(STORAGE_KEY_ADDED) || '[]')\n    .filter(w => String(w.id) !== String(id))\n  localStorage.setItem(\n    STORAGE_KEY_ADDED,\n    JSON.stringify(added)\n  )\n\n  const deleted = JSON.parse(localStorage.getItem(STORAGE_KEY_DELETED) || '[]')\n  if (!deleted.includes(String(id))) {\n    deleted.push(String(id))\n    localStorage.setItem(\n      STORAGE_KEY_DELETED,\n      JSON.stringify(deleted)\n    )\n  }\n\n  return id\n}\n\n/**\n * Получить слова серверные и локальные:\n *  1) Фетчим с сервера\n *  2) Отрезаем удалённые (deletedWords)\n *  3) Заменяем серверные на локальные правки (addedWords)\n *  4) Добавляем полностью новые из addedWords\n */\nexport async function fetchMergedWords() {\n  const serverWords = await fetchWordsFromServer()\n  const deleted = JSON.parse(localStorage.getItem(STORAGE_KEY_DELETED) || '[]')\n  const added = JSON.parse(localStorage.getItem(STORAGE_KEY_ADDED) || '[]')\n\n  const filtered = serverWords.filter(w => !deleted.includes(String(w.id)))\n\n  const merged = filtered.map(w =>\n    added.find(a => String(a.id) === String(w.id)) || w\n  )\n\n  const extras = added.filter(a =>\n    !filtered.find(w => String(w.id) === String(a.id))\n  )\n\n  return [...merged, ...extras]\n}\n"],"names":["WordCard","_ref","english","transcription","russian","flipped","setFlipped","useState","_jsx","className","styles","cardWrapper","onClick","f","children","_jsxs","card","isFlipped","cardFront","cardBack","translation","FlipCardGame","_currentWord$id","words","idx","setIdx","direction","setDirection","marked","setMarked","qc","useQueryClient","safeIndex","Array","isArray","length","Math","min","currentWord","id","progress","saveProgress","useProgress","goPrev","useCallback","i","goNext","useEffect","onKey","e","key","preventDefault","window","addEventListener","removeEventListener","container","_Fragment","AnimatePresence","initial","custom","motion","div","variants","enter","dir","rotateY","opacity","transformOrigin","center","transition","duration","exit","animate","cardMotion","onAnimationComplete","definition","checkButton","knownByUser","invalidateQueries","disabled","controls","status","shuffle","arr","map","v","sort","random","value","a","b","o","useTestGameLogic","celebrating","setCelebrating","displayedStreak","setDisplayedStreak","selected","setSelected","isCorrect","setIsCorrect","data","allWords","isLoading","allLoading","isError","allError","useQuery","fetchMergedWords","refetchOnWindowFocus","staleTime","empty","word","currentId","next","reset","_word$id","index","setIndex","prev","useWordNavigation","correctStreak","options","correctAnswer","useMemo","distractors","filter","w","slice","correctVal","toLowerCase","useOptions","handleClearSelection","invalidateTrainAndVocab","predicate","query","includes","queryKey","handleSelect","choice","isCorrectChoice","nextStreak","update","handleScreenClick","rawCount","displayCount","TestGameUI","props","wordsLength","Spinner","toggle","active","prompt","max","opt","stopPropagation","correct","wrong","celebration","footer","ok","err","nextButton","resetButton","TestGame","logic","async","fetchTrainWords","all","prog","JSON","parse","localStorage","getItem","deleted","STORAGE_KEY_DELETED","_prog$w$id","String","TrainPage","mode","setMode","trainWords","enabled","Boolean","page","title","selection","largeButton","emptyActions","Link","to","linkButton","backToMenu","STORAGE_KEY","DEFAULT","wordId","state","setState","updates","setItem","stringify","resetProgress","API_URL","process","STORAGE_KEY_ADDED","addWord","axios","post","then","res","addWordOnServer","entry","Date","now","tags","stored","updateWord","put","updateWordOnServer","deleteWord","startsWith","delete","deleteWordOnServer","added","push","serverWords","get","filtered","find"],"sourceRoot":""}