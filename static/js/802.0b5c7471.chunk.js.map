{"version":3,"file":"static/js/802.0b5c7471.chunk.js","mappings":"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","sources":["webpack://english-flashcards/./src/pages/VocabPage/VocabPage.module.scss?566c","pages/VocabPage/VocabPage.jsx","utils/storage.js","api/words.js","hooks/words/useProgress.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"page\":\"VocabPage_page__JdCUR\",\"status\":\"VocabPage_status__TapHR\",\"title\":\"VocabPage_title__Q+gxY\",\"table\":\"VocabPage_table__mZDms\",\"actions\":\"VocabPage_actions__G2xyx\",\"repeatButton\":\"VocabPage_repeatButton__WEbW9\"};","import React from 'react'\nimport { useQuery, useQueryClient } from '@tanstack/react-query'\nimport { fetchMergedWords }         from '../../api/words'\nimport { resetProgress } from '../../hooks/words/useProgress'\nimport Spinner from '../../components/Spinner/Spinner'\nimport styles from './VocabPage.module.scss'\n\nexport default function VocabPage() {\n  const qc = useQueryClient()\n  const progress = JSON.parse(localStorage.getItem('vocabProgress') || '{}')\n\n  const { data: words = [], isLoading, isError } = useQuery({\n    queryKey: ['vocabWords'],\n    queryFn: async () => {\n      const all = await fetchMergedWords()\n      return all.filter(w => progress[w.id]?.knownByUser)\n    },\n    refetchOnWindowFocus: false\n  })\n\n  const handleRemove = id => {\n    resetProgress(id)\n\n    qc.setQueryData(['vocabWords'], old =>\n      (old || []).filter(w => w.id !== id)\n    )\n\n    const removed = words.find(w => w.id === id)\n    qc.setQueryData(['trainWords'], old =>\n      removed ? [removed, ...(old || [])] : (old || [])\n    )\n  }\n\n  if (isLoading) return <Spinner />\n  if (isError)   return <p className={styles.status}>Ошибка при загрузке</p>\n\n  return (\n    <div className={styles.page}>\n      <h2 className={styles.title}>Мой словарный запас</h2>\n      {words.length === 0 ? (\n        <p className={styles.status}>Словарь пока пуст.</p>\n      ) : (\n        <table className={styles.table}>\n          <thead>\n            <tr>\n              <th>Слово</th><th>Транскрипция</th><th>Перевод</th><th>Тема</th><th>Действия</th>\n            </tr>\n          </thead>\n          <tbody>\n            {words.map(w => (\n              <tr key={`vocab-${w.id}`}>\n                <td>{w.english}</td>\n                <td>{w.transcription || '—'}</td>\n                <td>{w.russian}</td>\n                <td>{w.tags || '—'}</td>\n                <td className={styles.actions}>\n                  <button\n                    className={styles.repeatButton}\n                    onClick={() => handleRemove(w.id)}\n                  > Повторить </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </div>\n  )\n}\n","export function getFromStorage(key) {\n  try {\n    return JSON.parse(localStorage.getItem(key)) || [];\n  } catch {\n    return [];\n  }\n}\n\nexport function setToStorage(key, data) {\n  localStorage.setItem(key, JSON.stringify(data));\n}\n","import axios from 'axios';\nimport { getFromStorage, setToStorage } from '../utils/storage';\n\nconst API_URL = process.env.REACT_APP_API_URL;\n\nexport const STORAGE_KEY_ADDED   = 'addedWords';\nexport const STORAGE_KEY_DELETED = 'deletedWords';\n\nexport const fetchWordsFromServer  = () =>\n  axios.get(`${API_URL}/words`).then(r => r.data);\n\nexport const addWordOnServer       = (word) =>\n  axios.post(`${API_URL}/words`, word).then(r => r.data);\n\nexport const updateWordOnServer    = (word) =>\n  axios.put(`${API_URL}/words/${word.id}`, word).then(r => r.data);\n\nexport const deleteWordOnServer    = (id) =>\n  axios.delete(`${API_URL}/words/${id}`);\n\n/* ────────────── ADD (он-/офлайн) ────────────── */\nexport async function addWord(word) {\n  try {\n    const data = await addWordOnServer(word);       \n\n    if (data?.id != null) {\n      const withoutDup = getFromStorage(STORAGE_KEY_ADDED)\n        .filter(w => String(w.english).toLowerCase() !== word.english.toLowerCase());\n      setToStorage(STORAGE_KEY_ADDED, withoutDup);\n      return data;         \n    }\n  } catch (_) {\n  }\n\n  const entry  = { id: `local-${Date.now()}`, ...word };\n  const added  = getFromStorage(STORAGE_KEY_ADDED);\n  setToStorage(STORAGE_KEY_ADDED, [...added, entry]);\n  return entry;\n}\n\n/* ────────────── UPDATE ────────────── */\nexport async function updateWord(word) {\n  const data  = await updateWordOnServer(word);\n  const id    = typeof data.id === 'number' ? data.id : word.id;\n  const entry = { id, ...word };\n\n  const merged = getFromStorage(STORAGE_KEY_ADDED)\n    .filter(w => String(w.id) !== String(id));\n  setToStorage(STORAGE_KEY_ADDED, [...merged, entry]);\n  return entry;\n}\n\n/* ────────────── DELETE ────────────── */\nexport async function deleteWord(id) {\n  if (!String(id).startsWith('local-')) {\n    await deleteWordOnServer(id);\n  }\n\n  const kept   = getFromStorage(STORAGE_KEY_ADDED)\n    .filter(w => String(w.id) !== String(id));\n  setToStorage(STORAGE_KEY_ADDED, kept);\n\n  const deleted = getFromStorage(STORAGE_KEY_DELETED);\n  if (!deleted.includes(String(id))) {\n    setToStorage(STORAGE_KEY_DELETED, [...deleted, String(id)]);\n  }\n  return id;\n}\n\n/* ────────────── MERGED LIST ────────────── */\nexport async function fetchMergedWords() {\n  const server = await fetchWordsFromServer();\n  const deleted = getFromStorage(STORAGE_KEY_DELETED);\n  const added   = getFromStorage(STORAGE_KEY_ADDED);\n\n  const filtered = server.filter(w => !deleted.includes(String(w.id)));\n  const merged   = filtered.map(w =>\n    added.find(a => String(a.id) === String(w.id)) || w\n  );\n  const extras = added.filter(a =>\n    !filtered.find(w => String(w.id) === String(a.id))\n  );\n  return [...merged, ...extras];\n}\n","import { useState, useEffect } from 'react'\n\nconst STORAGE_KEY = 'vocabProgress'\nconst DEFAULT = { correctStreak: 0, knownByUser: false }\n\n/**\n * Хук хранит для каждого wordId:\n *  - correctStreak: сколько раз подряд угадано в тесте\n *  - knownByUser\n *\n * Возвращает [state, saveProgress, resetProgress]\n */\nexport function useProgress(wordId) {\n  const [state, setState] = useState(DEFAULT)\n\n  useEffect(() => {\n    const all = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}')\n    setState(all[wordId] || DEFAULT)\n  }, [wordId])\n\n  const saveProgress = updates => {\n    setState(prev => {\n      const next = { ...prev, ...updates }\n      const all  = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}')\n      all[wordId] = next\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(all))\n      return next\n    })\n  }\n\n  const resetProgress = () => {\n    setState(DEFAULT)\n    const all = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}')\n    delete all[wordId]\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(all))\n  }\n\n  return [state, saveProgress, resetProgress]\n}\n\n/**\n * Глобальная функция для сброса прогресса вне компонента\n */\nexport function resetProgress(wordId) {\n  const all = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}')\n  delete all[wordId]\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(all))\n}\n"],"names":["VocabPage","qc","useQueryClient","progress","JSON","parse","localStorage","getItem","data","words","isLoading","isError","useQuery","queryKey","queryFn","async","fetchMergedWords","filter","w","_progress$w$id","id","knownByUser","refetchOnWindowFocus","_jsx","Spinner","className","styles","status","children","_jsxs","page","title","length","table","map","english","transcription","russian","tags","actions","repeatButton","onClick","resetProgress","setQueryData","old","removed","find","handleRemove","concat","getFromStorage","key","_unused","setToStorage","setItem","stringify","API_URL","process","STORAGE_KEY_ADDED","STORAGE_KEY_DELETED","fetchWordsFromServer","axios","get","then","r","addWordOnServer","word","post","updateWordOnServer","put","deleteWordOnServer","delete","addWord","withoutDup","String","toLowerCase","_","entry","_objectSpread","Date","now","added","updateWord","merged","deleteWord","startsWith","kept","deleted","includes","server","filtered","a","STORAGE_KEY","DEFAULT","correctStreak","useProgress","wordId","state","setState","useState","useEffect","all","updates","prev","next"],"sourceRoot":""}