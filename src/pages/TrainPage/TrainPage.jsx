import React, { useState } from 'react'
import { useQuery }        from '@tanstack/react-query'
import { Link }            from 'react-router-dom'
import { fetchMergedWords, STORAGE_KEY_DELETED } from '../../api/words'
import FlipCardGame        from '../../components/words/FlipCardGame/FlipCardGame'
import TestGame            from '../../components/words/TestGame/TestGame'
import styles              from './TrainPage.module.scss'

/**
 * –ë–µ—Ä—ë–º –≤—Å–µ —Å–ª–æ–≤–∞ (API + –ª–æ–∫–∞–ª–∫–∞),
 * –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º:
 *  ‚Äî –∏–∑—É—á–µ–Ω–Ω—ã–µ (knownByUser)
 *  ‚Äî —É–¥–∞–ª—ë–Ω–Ω—ã–µ (deletedWords)
 */

async function fetchTrainWords() {
  const all     = await fetchMergedWords()
  const prog    = JSON.parse(localStorage.getItem('vocabProgress') || '{}')
  const deleted = JSON.parse(localStorage.getItem(STORAGE_KEY_DELETED) || '[]')

  return all.filter(w =>
    !prog[w.id]?.knownByUser &&
    !deleted.includes(String(w.id))
  )
}

export default function TrainPage() {
  const [mode, setMode] = useState(null)

  const { data: trainWords = [], isLoading, isError } = useQuery(
    ['trainWords', mode],
    fetchTrainWords,
    {
      enabled: Boolean(mode),
      refetchOnWindowFocus: false,
      staleTime: 5 * 60_000,
    }
  )

  if (mode === null) {
    return (
      <div className={styles.page}>
        <h2 className={styles.title}>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º</h2>
        <div className={styles.selection}>
          <button className={styles.largeButton} onClick={() => setMode('flip')}>
            –ü–µ—Ä–µ–≤–µ—Ä–Ω–∏ –∫–∞—Ä—Ç–æ—á–∫—É
          </button>
          <button className={styles.largeButton} onClick={() => setMode('test')}>
            –¢–µ—Å—Ç
          </button>
        </div>
      </div>
    )
  }

  if (isLoading) return <p className={styles.status}>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤‚Ä¶</p>
  if (isError)   return <p className={styles.status}>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ</p>

  if (trainWords.length === 0) {
    return (
      <div className={styles.page}>
        <h2 className={styles.status}>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—Å–µ —Å–ª–æ–≤–∞ –≤—ã—É—á–µ–Ω—ã! üéâ</h2>
        <div className={styles.emptyActions}>
          <Link to="/vocab" className={styles.linkButton}>–ú–æ–π —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å</Link>
          <Link to="/add"   className={styles.linkButton}>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞</Link>
        </div>
      </div>
    )
  }

  return (
    <div className={styles.page}>
      <button className={styles.backToMenu} onClick={() => setMode(null)}>
        ‚Üê –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞
      </button>
      {mode === 'flip'
        ? <FlipCardGame words={trainWords} />
        : <TestGame     words={trainWords} />
      }
    </div>
  )
}
