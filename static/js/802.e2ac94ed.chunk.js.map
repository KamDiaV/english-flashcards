{"version":3,"file":"static/js/802.e2ac94ed.chunk.js","mappings":"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","sources":["webpack://english-flashcards/./src/pages/VocabPage/VocabPage.module.scss?566c","pages/VocabPage/VocabPage.jsx","hooks/useProgress.js","api/words.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"page\":\"VocabPage_page__JdCUR\",\"status\":\"VocabPage_status__TapHR\",\"title\":\"VocabPage_title__Q+gxY\",\"table\":\"VocabPage_table__mZDms\",\"actions\":\"VocabPage_actions__G2xyx\",\"repeatButton\":\"VocabPage_repeatButton__WEbW9\"};","import React from 'react'\nimport { useQuery, useQueryClient } from '@tanstack/react-query'\nimport { fetchMergedWords }         from '../../api/words'\nimport { resetProgress } from '../../hooks/useProgress'\nimport Spinner from '../../components/Spinner/Spinner'\nimport styles from './VocabPage.module.scss'\n\nexport default function VocabPage() {\n  const qc = useQueryClient()\n  const progress = JSON.parse(localStorage.getItem('vocabProgress') || '{}')\n\n  const { data: words = [], isLoading, isError } = useQuery({\n    queryKey: ['vocabWords'],\n    queryFn: async () => {\n      const all = await fetchMergedWords()\n      return all.filter(w => progress[w.id]?.knownByUser)\n    },\n    refetchOnWindowFocus: false\n  })\n\n  const handleRemove = id => {\n    resetProgress(id)\n\n    qc.setQueryData(['vocabWords'], old =>\n      (old || []).filter(w => w.id !== id)\n    )\n\n    const removed = words.find(w => w.id === id)\n    qc.setQueryData(['trainWords'], old =>\n      removed ? [removed, ...(old || [])] : (old || [])\n    )\n  }\n\n  if (isLoading) return <Spinner />\n  if (isError)   return <p className={styles.status}>Ошибка при загрузке</p>\n\n  return (\n    <div className={styles.page}>\n      <h2 className={styles.title}>Мой словарный запас</h2>\n      {words.length === 0 ? (\n        <p className={styles.status}>Словарь пока пуст.</p>\n      ) : (\n        <table className={styles.table}>\n          <thead>\n            <tr>\n              <th>Слово</th><th>Транскрипция</th><th>Перевод</th><th>Тема</th><th>Действия</th>\n            </tr>\n          </thead>\n          <tbody>\n            {words.map(w => (\n              <tr key={`vocab-${w.id}`}>\n                <td>{w.english}</td>\n                <td>{w.transcription || '—'}</td>\n                <td>{w.russian}</td>\n                <td>{w.tags || '—'}</td>\n                <td className={styles.actions}>\n                  <button\n                    className={styles.repeatButton}\n                    onClick={() => handleRemove(w.id)}\n                  > Повторить </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </div>\n  )\n}\n","import { useState, useEffect } from 'react'\n\nconst STORAGE_KEY = 'vocabProgress'\nconst DEFAULT = { correctStreak: 0, knownByUser: false }\n\n/**\n * Хук хранит для каждого wordId:\n *  - correctStreak: сколько раз подряд угадано в тесте\n *  - knownByUser\n *\n * Возвращает [state, saveProgress, resetProgress]\n */\nexport function useProgress(wordId) {\n  const [state, setState] = useState(DEFAULT)\n\n  useEffect(() => {\n    const all = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}')\n    setState(all[wordId] || DEFAULT)\n  }, [wordId])\n\n  const saveProgress = updates => {\n    setState(prev => {\n      const next = { ...prev, ...updates }\n      const all  = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}')\n      all[wordId] = next\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(all))\n      return next\n    })\n  }\n\n  const resetProgress = () => {\n    setState(DEFAULT)\n    const all = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}')\n    delete all[wordId]\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(all))\n  }\n\n  return [state, saveProgress, resetProgress]\n}\n\n/**\n * Глобальная функция для сброса прогресса вне компонента\n */\nexport function resetProgress(wordId) {\n  const all = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}')\n  delete all[wordId]\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(all))\n}\n","import axios from 'axios'\n\nconst API_URL = process.env.REACT_APP_API_URL\n\nexport const STORAGE_KEY_ADDED   = 'addedWords'\nexport const STORAGE_KEY_DELETED = 'deletedWords'\n\n/**\n * Получаем данные с сервера (без учёта локальных изменений)\n */\nexport function fetchWordsFromServer() {\n  return axios\n    .get(`${API_URL}/words`)\n    .then(res => res.data)\n}\n\n/**\n * Добавляем новое слово\n */\nexport function addWordOnServer(word) {\n  return axios\n    .post(`${API_URL}/words`, word)\n    .then(res => res.data)\n}\n\n/**\n * Обновляем слово на сервере\n */\nexport function updateWordOnServer(word) {\n  return axios\n    .put(`${API_URL}/words/${word.id}`, word)\n    .then(res => res.data)\n}\n\n/**\n * Удаляем слово на сервере\n */\nexport function deleteWordOnServer(id) {\n  return axios.delete(`${API_URL}/words/${id}`)\n}\n\n/**\n * Обёртка: POST + локальное сохранение\n */\nexport async function addWord(word) {\n  const data = await addWordOnServer(word)\n  const id = typeof data.id === 'number' ? data.id : `local-${Date.now()}`\n\n  const entry = {\n    id,\n    english: word.english,\n    transcription: word.transcription,\n    russian: word.russian,\n    tags: word.tags\n  }\n\n  const stored = JSON.parse(localStorage.getItem(STORAGE_KEY_ADDED) || '[]')\n  localStorage.setItem(\n    STORAGE_KEY_ADDED,\n    JSON.stringify([...stored, entry])\n  )\n\n  return entry\n}\n\n/**\n * Обёртка: PUT + локальная синхронизация (для редактирования локальных слов)\n */\nexport async function updateWord(word) {\n  const data = await updateWordOnServer(word)\n  const id = typeof data.id === 'number' ? data.id : word.id\n\n  const entry = {\n    id,\n    english:      word.english,\n    transcription: word.transcription,\n    russian:      word.russian,\n    tags:         word.tags\n  }\n\n  const stored = JSON.parse(localStorage.getItem(STORAGE_KEY_ADDED) || '[]')\n    .filter(w => String(w.id) !== String(id))\n  localStorage.setItem(\n    STORAGE_KEY_ADDED,\n    JSON.stringify([...stored, entry])\n  )\n\n  return entry\n}\n\n/**\n * Обёртка: DELETE + пометка в deletedWords\n */\nexport async function deleteWord(id) {\n  if (!String(id).startsWith('local-')) {\n    await deleteWordOnServer(id)\n  }\n\n  const added = JSON.parse(localStorage.getItem(STORAGE_KEY_ADDED) || '[]')\n    .filter(w => String(w.id) !== String(id))\n  localStorage.setItem(\n    STORAGE_KEY_ADDED,\n    JSON.stringify(added)\n  )\n\n  const deleted = JSON.parse(localStorage.getItem(STORAGE_KEY_DELETED) || '[]')\n  if (!deleted.includes(String(id))) {\n    deleted.push(String(id))\n    localStorage.setItem(\n      STORAGE_KEY_DELETED,\n      JSON.stringify(deleted)\n    )\n  }\n\n  return id\n}\n\n/**\n * Получить слова серверные и локальные:\n *  1) Фетчим с сервера\n *  2) Отрезаем удалённые (deletedWords)\n *  3) Заменяем серверные на локальные правки (addedWords)\n *  4) Добавляем полностью новые из addedWords\n */\nexport async function fetchMergedWords() {\n  const serverWords = await fetchWordsFromServer()\n  const deleted = JSON.parse(localStorage.getItem(STORAGE_KEY_DELETED) || '[]')\n  const added = JSON.parse(localStorage.getItem(STORAGE_KEY_ADDED) || '[]')\n\n  const filtered = serverWords.filter(w => !deleted.includes(String(w.id)))\n\n  const merged = filtered.map(w =>\n    added.find(a => String(a.id) === String(w.id)) || w\n  )\n\n  const extras = added.filter(a =>\n    !filtered.find(w => String(w.id) === String(a.id))\n  )\n\n  return [...merged, ...extras]\n}\n"],"names":["VocabPage","qc","useQueryClient","progress","JSON","parse","localStorage","getItem","data","words","isLoading","isError","useQuery","queryKey","queryFn","async","fetchMergedWords","filter","w","_progress$w$id","id","knownByUser","refetchOnWindowFocus","_jsx","Spinner","className","styles","status","children","_jsxs","page","title","length","table","map","english","transcription","russian","tags","actions","repeatButton","onClick","resetProgress","setQueryData","old","removed","find","handleRemove","STORAGE_KEY","DEFAULT","correctStreak","useProgress","wordId","state","setState","useState","useEffect","all","updates","prev","next","setItem","stringify","API_URL","process","STORAGE_KEY_ADDED","STORAGE_KEY_DELETED","addWord","word","axios","post","then","res","addWordOnServer","entry","Date","now","stored","updateWord","put","updateWordOnServer","String","deleteWord","startsWith","delete","deleteWordOnServer","added","deleted","includes","push","serverWords","get","filtered","a"],"sourceRoot":""}