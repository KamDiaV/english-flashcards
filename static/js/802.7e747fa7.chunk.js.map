{"version":3,"file":"static/js/802.7e747fa7.chunk.js","mappings":"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","sources":["webpack://english-flashcards/./src/pages/VocabPage/VocabPage.module.scss?566c","pages/VocabPage/VocabPage.jsx","utils/storage.js","api/words.js","hooks/words/useProgress.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"page\":\"VocabPage_page__JdCUR\",\"status\":\"VocabPage_status__TapHR\",\"title\":\"VocabPage_title__Q+gxY\",\"table\":\"VocabPage_table__mZDms\",\"actions\":\"VocabPage_actions__G2xyx\",\"repeatButton\":\"VocabPage_repeatButton__WEbW9\"};","import React from 'react'\nimport { useQuery, useQueryClient } from '@tanstack/react-query'\nimport { fetchMergedWords }         from '../../api/words'\nimport { resetProgress } from '../../hooks/words/useProgress'\nimport Spinner from '../../components/Spinner/Spinner'\nimport styles from './VocabPage.module.scss'\n\nexport default function VocabPage() {\n  const qc = useQueryClient()\n  const progress = JSON.parse(localStorage.getItem('vocabProgress') || '{}')\n\n  const { data: words = [], isLoading, isError } = useQuery({\n    queryKey: ['vocabWords'],\n    queryFn: async () => {\n      const all = await fetchMergedWords()\n      return all.filter(w => progress[w.id]?.knownByUser)\n    },\n    refetchOnWindowFocus: false\n  })\n\n  const handleRemove = id => {\n    resetProgress(id)\n\n    qc.setQueryData(['vocabWords'], old =>\n      (old || []).filter(w => w.id !== id)\n    )\n\n    const removed = words.find(w => w.id === id)\n    qc.setQueryData(['trainWords'], old =>\n      removed ? [removed, ...(old || [])] : (old || [])\n    )\n  }\n\n  if (isLoading) return <Spinner />\n  if (isError)   return <p className={styles.status}>Ошибка при загрузке</p>\n\n  return (\n    <div className={styles.page}>\n      <h2 className={styles.title}>Мой словарный запас</h2>\n      {words.length === 0 ? (\n        <p className={styles.status}>Словарь пока пуст.</p>\n      ) : (\n        <table className={styles.table}>\n          <thead>\n            <tr>\n              <th>Слово</th><th>Транскрипция</th><th>Перевод</th><th>Тема</th><th>Действия</th>\n            </tr>\n          </thead>\n          <tbody>\n            {words.map(w => (\n              <tr key={`vocab-${w.id}`}>\n                <td>{w.english}</td>\n                <td>{w.transcription || '—'}</td>\n                <td>{w.russian}</td>\n                <td>{w.tags || '—'}</td>\n                <td className={styles.actions}>\n                  <button\n                    className={styles.repeatButton}\n                    onClick={() => handleRemove(w.id)}\n                  > Повторить </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </div>\n  )\n}\n","export function getFromStorage(key) {\n  try {\n    return JSON.parse(localStorage.getItem(key)) || [];\n  } catch {\n    return [];\n  }\n}\n\nexport function setToStorage(key, data) {\n  localStorage.setItem(key, JSON.stringify(data));\n}\n","import axios from 'axios'\nimport { getFromStorage, setToStorage } from '../utils/storage'\n\nconst API_URL = process.env.REACT_APP_API_URL\n\nexport const STORAGE_KEY_ADDED   = 'addedWords'\nexport const STORAGE_KEY_DELETED = 'deletedWords'\n\nexport function fetchWordsFromServer() {\n  return axios.get(`${API_URL}/words`).then(res => res.data)\n}\nexport function addWordOnServer(word) {\n  return axios.post(`${API_URL}/words`, word).then(res => res.data)\n}\nexport function updateWordOnServer(word) {\n  return axios.put(`${API_URL}/words/${word.id}`, word).then(res => res.data)\n}\nexport function deleteWordOnServer(id) {\n  return axios.delete(`${API_URL}/words/${id}`)\n}\n\n/**\n * Обёртка: POST + локальное сохранение\n */\nexport async function addWord(word) {\n  const data = await addWordOnServer(word)\n  const id   = typeof data.id === 'number' ? data.id : `local-${Date.now()}`\n  const entry = { id, ...word }\n\n  const added = getFromStorage(STORAGE_KEY_ADDED)\n  setToStorage(STORAGE_KEY_ADDED, [...added, entry])\n\n  return entry\n}\n\n/**\n * Обёртка: PUT + локальная синхронизация\n */\nexport async function updateWord(word) {\n  const data = await updateWordOnServer(word)\n  const id   = typeof data.id === 'number' ? data.id : word.id\n  const entry = { id, ...word }\n\n  const added = getFromStorage(STORAGE_KEY_ADDED)\n    .filter(w => String(w.id) !== String(id))\n  setToStorage(STORAGE_KEY_ADDED, [...added, entry])\n\n  return entry\n}\n\n/**\n * Обёртка: DELETE + учёт удалённых\n */\nexport async function deleteWord(id) {\n  if (!String(id).startsWith('local-')) {\n    await deleteWordOnServer(id)\n  }\n\n  const added = getFromStorage(STORAGE_KEY_ADDED)\n    .filter(w => String(w.id) !== String(id))\n  setToStorage(STORAGE_KEY_ADDED, added)\n\n  const deleted = getFromStorage(STORAGE_KEY_DELETED)\n  if (!deleted.includes(String(id))) {\n    setToStorage(STORAGE_KEY_DELETED, [...deleted, String(id)])\n  }\n\n  return id\n}\n\n/**\n * Получить «слитые» слова:\n * — серверные без удалённых\n * — заменённые локальными\n * — добавленные локально\n */\nexport async function fetchMergedWords() {\n  const serverWords = await fetchWordsFromServer()\n  const deleted     = getFromStorage(STORAGE_KEY_DELETED)\n  const added       = getFromStorage(STORAGE_KEY_ADDED)\n\n  const filtered = serverWords.filter(w => !deleted.includes(String(w.id)))\n  const merged   = filtered.map(w =>\n    added.find(a => String(a.id) === String(w.id)) || w\n  )\n  const extras   = added.filter(a =>\n    !filtered.find(w => String(w.id) === String(a.id))\n  )\n\n  return [...merged, ...extras]\n}\n","import { useState, useEffect } from 'react'\n\nconst STORAGE_KEY = 'vocabProgress'\nconst DEFAULT = { correctStreak: 0, knownByUser: false }\n\n/**\n * Хук хранит для каждого wordId:\n *  - correctStreak: сколько раз подряд угадано в тесте\n *  - knownByUser\n *\n * Возвращает [state, saveProgress, resetProgress]\n */\nexport function useProgress(wordId) {\n  const [state, setState] = useState(DEFAULT)\n\n  useEffect(() => {\n    const all = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}')\n    setState(all[wordId] || DEFAULT)\n  }, [wordId])\n\n  const saveProgress = updates => {\n    setState(prev => {\n      const next = { ...prev, ...updates }\n      const all  = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}')\n      all[wordId] = next\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(all))\n      return next\n    })\n  }\n\n  const resetProgress = () => {\n    setState(DEFAULT)\n    const all = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}')\n    delete all[wordId]\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(all))\n  }\n\n  return [state, saveProgress, resetProgress]\n}\n\n/**\n * Глобальная функция для сброса прогресса вне компонента\n */\nexport function resetProgress(wordId) {\n  const all = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}')\n  delete all[wordId]\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(all))\n}\n"],"names":["VocabPage","qc","useQueryClient","progress","JSON","parse","localStorage","getItem","data","words","isLoading","isError","useQuery","queryKey","queryFn","async","fetchMergedWords","filter","w","_progress$w$id","id","knownByUser","refetchOnWindowFocus","_jsx","Spinner","className","styles","status","children","_jsxs","page","title","length","table","map","english","transcription","russian","tags","actions","repeatButton","onClick","resetProgress","setQueryData","old","removed","find","handleRemove","concat","getFromStorage","key","_unused","setToStorage","setItem","stringify","API_URL","process","STORAGE_KEY_ADDED","STORAGE_KEY_DELETED","addWord","word","axios","post","then","res","addWordOnServer","Date","now","entry","_objectSpread","added","updateWord","put","updateWordOnServer","String","deleteWord","startsWith","delete","deleteWordOnServer","deleted","includes","serverWords","get","filtered","a","STORAGE_KEY","DEFAULT","correctStreak","useProgress","wordId","state","setState","useState","useEffect","all","updates","prev","next"],"sourceRoot":""}