{"version":3,"file":"static/js/23.5e656043.chunk.js","mappings":"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","sources":["webpack://english-flashcards/./src/components/words/WordCard/WordCard.module.scss?a298","components/words/WordCard/WordCard.jsx","webpack://english-flashcards/./src/components/words/FlipCardGame/FlipCardGame.module.scss?1d12","components/words/FlipCardGame/FlipCardGame.jsx","utils/shuffle.js","hooks/words/game/useTestGameLogic.js","hooks/words/useWordNavigation.js","hooks/words/game/useOptions.js","webpack://english-flashcards/./src/components/words/TestGame/TestGame.module.scss?a87f","components/words/TestGame/TestGameUI.jsx","components/words/TestGame/TestGame.jsx","webpack://english-flashcards/./src/pages/TrainPage/TrainPage.module.scss?4399","pages/TrainPage/TrainPage.jsx","constants/queryKeys.js","utils/storage.js","api/words.js","hooks/words/useProgress.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"cardWrapper\":\"WordCard_cardWrapper__jHn87\",\"flipIcon\":\"WordCard_flipIcon__dKwrp\",\"card\":\"WordCard_card__jVwgg\",\"isFlipped\":\"WordCard_isFlipped__ACnbb\",\"cardFront\":\"WordCard_cardFront__tkZO+\",\"cardBack\":\"WordCard_cardBack__iZQ0q\",\"english\":\"WordCard_english__5kBOo\",\"transcription\":\"WordCard_transcription__YMEiV\",\"translation\":\"WordCard_translation__xCCyt\"};","import React, { useState, useEffect, useRef } from 'react'\nimport styles from './WordCard.module.scss'\n\nexport default function WordCard({ english, transcription, russian }) {\n  const [flipped, setFlipped] = useState(false)\n  const iconRef = useRef(null)\n\n  useEffect(() => {\n    if (!flipped && iconRef.current) {\n      iconRef.current.focus()\n    }\n  }, [english, transcription, flipped])\n\n  const toggleFlip = e => {\n    e.stopPropagation()\n    setFlipped(f => !f)\n  }\n\n  return (\n    <div\n      className={styles.cardWrapper}\n      onClick={() => setFlipped(f => !f)}\n    >\n      <div className={`${styles.card} ${flipped ? styles.isFlipped : ''}`}>\n        <div className={styles.cardFront}>\n          <p className={styles.english}>{english}</p>\n          <p className={styles.transcription}>{transcription}</p>\n          <span\n            ref={iconRef}\n            className={styles.flipIcon}\n            onClick={toggleFlip}\n            role=\"button\"\n            tabIndex={0}\n            aria-label=\"Flip card\"\n            onKeyDown={e => {\n              if (e.key === 'Enter' || e.key === ' ') {\n                e.preventDefault()\n                toggleFlip(e)\n              }\n            }}\n          >\n            🔄\n          </span>\n        </div>\n        <div className={styles.cardBack}>\n          <p className={styles.translation}>{russian}</p>\n          <span\n            className={styles.flipIcon}\n            onClick={toggleFlip}\n            role=\"button\"\n            tabIndex={0}\n            aria-label=\"Flip card back\"\n          >\n            🔄\n          </span>\n        </div>\n      </div>\n    </div>\n  )\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"FlipCardGame_container__9peXM\",\"cardWrapper\":\"FlipCardGame_cardWrapper__e66if\",\"cardMotion\":\"FlipCardGame_cardMotion__ovtHr\",\"learnedCounter\":\"FlipCardGame_learnedCounter__QZj3u\",\"checkButton\":\"FlipCardGame_checkButton__427CO\",\"controls\":\"FlipCardGame_controls__-ewaO\",\"status\":\"FlipCardGame_status__0RBR1\"};","import React, { useState, useEffect, useCallback } from 'react'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport { useQueryClient } from '@tanstack/react-query'\nimport { useProgress } from '../../../hooks/words/useProgress'\nimport { QUERY_KEYS } from '../../../constants/queryKeys'\nimport WordCard from '../WordCard/WordCard'\nimport styles from './FlipCardGame.module.scss'\n\nexport default function FlipCardGame({ words }) {\n  const qc = useQueryClient()\n\n  const [idx, setIdx] = useState(0)\n  const [direction, setDirection] = useState(1)\n  const [marked, setMarked] = useState(false)\n\n  const [learnedCount, setLearnedCount] = useState(0)\n\n  const safeIndex = Array.isArray(words) && words.length\n    ? Math.min(idx, words.length - 1)\n    : 0\n\n  const currentWord = Array.isArray(words) && words.length\n    ? words[safeIndex]\n    : { id: null, english: '', transcription: '', russian: '' }\n\n  const [progress, saveProgress] = useProgress(currentWord.id ?? '')\n\n  const goPrev = useCallback(() => {\n    if (!words?.length || safeIndex === 0) return\n    setDirection(-1)\n    setIdx(i => i - 1)\n  }, [safeIndex, words])\n\n  const goNext = useCallback(() => {\n    if (!words?.length || safeIndex === words.length - 1) return\n    setDirection(1)\n    setIdx(i => i + 1)\n  }, [safeIndex, words])\n\n  function handleMarkKnown() {\n    saveProgress({ knownByUser: true })\n    qc.invalidateQueries({ queryKey: QUERY_KEYS.TRAIN_WORDS })\n    qc.invalidateQueries({ queryKey: QUERY_KEYS.VOCAB_WORDS })\n    setMarked(true)\n  \n    setLearnedCount(c => c + 1)\n  \n    setTimeout(() => {\n      setMarked(false)\n      goNext()\n    }, 500)\n  }\n\n  useEffect(() => {\n    function onKey(e) {\n      if (e.key === 'ArrowLeft') {\n        e.preventDefault()\n        goPrev()\n      } else if (e.key === 'ArrowRight') {\n        e.preventDefault()\n        goNext()\n      }\n    }\n    window.addEventListener('keydown', onKey)\n    return () => window.removeEventListener('keydown', onKey)\n  }, [goPrev, goNext])\n\n  const variants = {\n    enter: dir => ({\n      rotateY: dir > 0 ? 90 : -90,\n      opacity: 0,\n      transformOrigin: dir > 0 ? 'left center' : 'right center',\n    }),\n    center: {\n      rotateY: 0,\n      opacity: 1,\n      transformOrigin: 'center center',\n      transition: { duration: 0.5 },\n    },\n    exit: dir => ({\n      rotateY: dir > 0 ? -90 : 90,\n      opacity: 0,\n      transformOrigin: dir > 0 ? 'right center' : 'left center',\n      transition: { duration: 0.4 },\n    }),\n  }\n\n  return (\n    <div className={styles.container}>\n      {!words?.length ? (\n        <p className={styles.status}>Нет слов для тренировки.</p>\n      ) : (\n        <>\n          <div className={styles.learnedCounter}>\n            Выучено слов за эту тренировку: <strong>{learnedCount}</strong>\n          </div>\n\n          <div className={styles.cardWrapper}>\n            <AnimatePresence initial={false} custom={direction}>\n              <motion.div\n                key={currentWord.id}\n                custom={direction}\n                variants={variants}\n                initial=\"enter\"\n                animate={marked ? 'exit' : 'center'}\n                exit=\"exit\"\n                transition={{ duration: 0.5 }}\n                className={styles.cardMotion}\n              >\n                <WordCard\n                  english={currentWord.english}\n                  transcription={currentWord.transcription}\n                  russian={currentWord.russian}\n                />\n              </motion.div>\n            </AnimatePresence>\n          </div>\n\n          <button\n            className={styles.checkButton}\n            onClick={handleMarkKnown}\n            disabled={marked}\n          >\n            Отметить как знаю\n          </button>\n\n          <div className={styles.controls}>\n            <button onClick={goPrev} disabled={safeIndex === 0}>\n              ←\n            </button>\n            <button onClick={goNext} disabled={safeIndex === words.length - 1}>\n              →\n            </button>\n          </div>\n        </>\n      )}\n    </div>\n  )\n}\n","export default function shuffle(arr) {\n  return arr\n    .map(v => ({ sort: Math.random(), value: v }))\n    .sort((a, b) => a.sort - b.sort)\n    .map(o => o.value)\n}\n","import { useState, useEffect, useCallback } from 'react';\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\nimport { QUERY_KEYS } from '../../../constants/queryKeys';\nimport { fetchMergedWords } from '../../../api/words';\nimport { useProgress } from '../useProgress';\nimport { useOptions } from './useOptions';\nimport { useWordNavigation } from '../useWordNavigation';\n\nexport function useTestGameLogic(words) {\n  const qc = useQueryClient();\n\n  const [celebrating, setCelebrating] = useState(false);\n  const [displayedStreak, setDisplayedStreak] = useState(null);\n  const [selected, setSelected] = useState(null);\n  const [isCorrect, setIsCorrect] = useState(null);\n  const [direction, setDirection] = useState('en-ru');\n\n  const {\n    data: allWords = [],\n    isLoading: allLoading,\n    isError:   allError,\n  } = useQuery({\n    queryKey: QUERY_KEYS.WORDS_FULL,\n    queryFn:  fetchMergedWords,\n    refetchOnWindowFocus: false,\n    staleTime: 5 * 60_000,\n  });\n\n  const { empty, safeIndex, word, currentId, next, reset } =\n    useWordNavigation(words);\n\n  useEffect(() => {\n    setCelebrating(false);\n    setDisplayedStreak(null);\n    setSelected(null);\n    setIsCorrect(null);\n  }, [currentId]);\n\n  const [progress, saveProgress] = useProgress(currentId);\n  const { correctStreak = 0 }    = progress;\n\n  const { options, correctAnswer } = useOptions(\n    allWords,\n    words,\n    safeIndex,\n    direction\n  );\n\n  const invalidateTrainAndVocab = useCallback(() => {\n    qc.invalidateQueries({ queryKey: QUERY_KEYS.TRAIN_WORDS });\n    qc.invalidateQueries({ queryKey: QUERY_KEYS.VOCAB_WORDS });\n  }, [qc]);\n\n  const handleClearSelection = useCallback(() => {\n    setSelected(null);\n    setIsCorrect(null);\n    setCelebrating(false);\n    setDisplayedStreak(null);\n  }, []);\n\n  const handleSelect = useCallback(\n    (choice) => {\n      if (selected !== null) return;\n\n      setSelected(choice);\n\n      const isCorrectChoice = choice.toLowerCase() === correctAnswer;\n      setIsCorrect(isCorrectChoice);\n\n      const nextStreak = isCorrectChoice ? correctStreak + 1 : 0;\n      const update     = { correctStreak: nextStreak };\n      if (nextStreak >= 5) update.knownByUser = true;\n\n      saveProgress(update);\n\n      if (isCorrectChoice && nextStreak >= 5) {\n        setCelebrating(true);\n        setDisplayedStreak(nextStreak);\n        return;                       \n      }\n\n      invalidateTrainAndVocab();\n    },\n    [selected, correctAnswer, correctStreak, saveProgress, invalidateTrainAndVocab]\n  );\n\n  const handleScreenClick = useCallback(\n    (e) => {\n      /* не даём клику дойти до кнопок */\n      e?.stopPropagation();\n\n      if (!celebrating) return;\n\n      setCelebrating(false);\n      setDisplayedStreak(null);\n      setSelected(null);\n      setIsCorrect(null);\n\n      invalidateTrainAndVocab();\n    },\n    [celebrating, invalidateTrainAndVocab]\n  );\n\n  const rawCount     = displayedStreak ?? correctStreak;\n  const displayCount = Math.min(rawCount, 5);\n\n  return {\n    isLoading:   allLoading,\n    isError:     allError,\n    empty,\n\n    word,\n    safeIndex,\n    next,\n    reset,\n\n    direction,\n    setDirection,\n\n    options,\n    correctAnswer,\n\n    selected,\n    isCorrect,\n\n    rawCount,\n    displayCount,\n\n    celebrating,\n    handleSelect,\n    handleScreenClick,\n    handleClearSelection,\n  };\n}\n","import { useState, useEffect } from 'react'\n\n/**\n * useWordNavigation — хук, который хранит текущий индекс, \n * вычисляет безопасный индекс и текущее слово, а также даёт функции\n * для перехода к следующему и сброса навигации.\n *\n * @param {Array} words — массив слов (каждый элемент {id, english, russian, …})\n * @returns {{\n *   safeIndex: number,   // индекс, не выходящий за границы массива\n *   word: object|null,   // текущее слово или null\n *   currentId: number|null, // id текущего слова\n *   next: () => void,    // функция «следующее слово»\n *   reset: () => void    // функция «начать сначала»\n * }}\n */\n\nexport function useWordNavigation(words) {\n  const [index, setIndex] = useState(0)\n\n  const empty = !Array.isArray(words) || words.length === 0\n  const safeIndex = empty ? 0 : Math.min(index, words.length - 1)\n  const word = empty ? null : words[safeIndex]\n  const currentId = word?.id ?? null\n\n  useEffect(() => {\n    setIndex(0)\n  }, [words])\n\n  const next = () => {\n    if (empty) return\n    setIndex(prev => {\n      return prev < words.length - 1 ? prev + 1 : prev\n    })\n  }\n\n  const reset = () => {\n    setIndex(0)\n  }\n\n  return { safeIndex, word, currentId, next, reset, empty }\n}\n","import { useMemo } from 'react';\nimport shuffle from '../../../utils/shuffle';\n\nexport function useOptions(allWords, words, safeIndex, direction) {\n  return useMemo(() => {\n    if (!Array.isArray(words) || !words.length ||\n        safeIndex < 0 || safeIndex >= words.length) {\n      return { options: [], correctAnswer: null };\n    }\n\n    const word = words[safeIndex];\n    if (!word) return { options: [], correctAnswer: null };\n\n    const correctVal   = direction === 'en-ru' ? word.russian : word.english;\n    const correctLower = correctVal.toLowerCase?.() ?? '';\n\n    const poolRaw = (Array.isArray(allWords) ? allWords : [])\n      .filter(w => w.id !== word.id)\n      .map(w => (direction === 'en-ru' ? w.russian : w.english))\n      .filter(t => !!t && t.toLowerCase() !== correctLower);\n\n    const pool = shuffle([...new Set(poolRaw)]);  \n\n    const distractors = pool.slice(0, 3);\n\n    let options = [correctVal, ...distractors];\n\n    while (options.length < 4) {\n      const filler = options[Math.floor(Math.random() * options.length)];\n      options.push(filler);\n    }\n\n    if (options.length > 4) {\n      options = shuffle(options).slice(0, 4);\n    } else {\n      options = shuffle(options);  \n    }\n\n    return {\n      options,\n      correctAnswer: correctLower,\n    };\n  }, [allWords, words, safeIndex, direction]);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"TestGame_container__W4QCg\",\"toggle\":\"TestGame_toggle__d5eTu\",\"active\":\"TestGame_active__5REuC\",\"prompt\":\"TestGame_prompt__D27ei\",\"status\":\"TestGame_status__yVXDb\",\"progress\":\"TestGame_progress__vcjdz\",\"options\":\"TestGame_options__NDWIb\",\"correct\":\"TestGame_correct__afOdp\",\"wrong\":\"TestGame_wrong__N3fIA\",\"footer\":\"TestGame_footer__jXnw9\",\"ok\":\"TestGame_ok__hxm7a\",\"err\":\"TestGame_err__fUU1S\",\"nextButton\":\"TestGame_nextButton__BTOoP\",\"resetButton\":\"TestGame_resetButton__dw-D+\",\"celebration\":\"TestGame_celebration__YTn-x\",\"pop\":\"TestGame_pop__X1akE\"};","import React from 'react';\nimport Spinner from '../../Spinner/Spinner';\nimport styles from './TestGame.module.scss';\n\nexport function TestGameUI(props) {\n  const {\n    isLoading,\n    isError,\n    empty,\n    word,\n    direction,\n    setDirection,\n    options,\n    correctAnswer,\n    selected,\n    isCorrect,\n    rawCount,\n    displayCount,\n    celebrating,\n    handleSelect,\n    handleScreenClick,\n    next,\n    reset,\n    safeIndex,\n    wordsLength,\n    handleClearSelection,\n  } = props;\n\n  /* ---------- состояния загрузки ---------- */\n  if (isLoading) return <Spinner />;\n  if (isError)   return <p className={styles.status}>Ошибка загрузки вариантов</p>;\n  if (empty || (props.knownByUser && !celebrating)) return <Spinner />;\n\n  /* ---------- основной рендер ---------- */\n  return (\n    <div className={styles.container} onClick={(e) => handleScreenClick(e)}>\n      <div className={styles.toggle}>\n        <button\n          className={direction === 'en-ru' ? styles.active : ''}\n          onClick={() => setDirection('en-ru')}>\n          Англ → Рус\n        </button>\n        <button\n          className={direction === 'ru-en' ? styles.active : ''}\n          onClick={() => setDirection('ru-en')}>\n          Рус → Англ\n        </button>\n      </div>\n\n      <p className={styles.prompt}>\n        {direction === 'en-ru' ? word.english : word.russian}\n      </p>\n\n      <div className={styles.progress}>\n        <progress value={displayCount} max={5} />\n        <span>{displayCount}/5</span>\n      </div>\n\n      {/* ---------- кнопки вариантов ---------- */}\n      <div className={styles.options}>\n        {options.map((opt, idx) => (\n          <button\n            key={`${opt}-${idx}`}                       \n            disabled={selected !== null || celebrating} \n            onClick={e => {\n              e.stopPropagation();\n              handleSelect(opt);\n            }}\n            className={\n              selected === null\n                ? ''\n                : opt.toLowerCase() === correctAnswer\n                ? styles.correct\n                : opt === selected\n                ? styles.wrong\n                : ''\n            }>\n            {opt}\n          </button>\n        ))}\n      </div>\n\n      {/* ---------- фейерверк ---------- */}\n      {celebrating && (\n        <div className={styles.celebration}>\n          🎉🎆 Отлично! Слово выучено! 🎆🎉\n        </div>\n      )}\n\n      {/* ---------- футер с навигацией ---------- */}\n      {!celebrating && selected !== null && (\n        <div className={styles.footer}>\n          <p className={isCorrect ? styles.ok : styles.err}>\n            {isCorrect\n              ? '✅ Правильно!'\n              : `❌ Неверно, ответ: ${\n                  direction === 'en-ru' ? word.russian : word.english\n                }`}\n          </p>\n\n          <button\n            onClick={() => {\n              handleClearSelection();\n              next();\n            }}\n            disabled={safeIndex === wordsLength - 1}\n            className={styles.nextButton}>\n            Следующее →\n          </button>\n\n          {safeIndex === wordsLength - 1 && (\n            <button\n              onClick={() => {\n                handleClearSelection();\n                reset();\n              }}\n              className={styles.resetButton}>\n              Начать сначала\n            </button>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}","import React from 'react'\nimport { useTestGameLogic } from '../../../hooks/words/game/useTestGameLogic'\nimport { TestGameUI } from './TestGameUI'\n\nexport default function TestGame({ words }) {\n  const logic = useTestGameLogic(words)\n\n  return <TestGameUI {...logic} wordsLength={words.length} />\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"page\":\"TrainPage_page__AVj1k\",\"backToMenu\":\"TrainPage_backToMenu__-9L1e\",\"title\":\"TrainPage_title__L3Yo3\",\"selection\":\"TrainPage_selection__pdbK7\",\"largeButton\":\"TrainPage_largeButton__Xu2N9\",\"status\":\"TrainPage_status__84YyE\",\"emptyActions\":\"TrainPage_emptyActions__otEk2\",\"linkButton\":\"TrainPage_linkButton__dh8CD\"};","import React, { useState } from 'react'\nimport { useQuery }        from '@tanstack/react-query'\nimport { Link }            from 'react-router-dom'\nimport { fetchMergedWords, STORAGE_KEY_DELETED } from '../../api/words'\nimport FlipCardGame        from '../../components/words/FlipCardGame/FlipCardGame'\nimport TestGame            from '../../components/words/TestGame/TestGame'\nimport styles              from './TrainPage.module.scss'\n\nasync function fetchTrainWords() {\n  const all     = await fetchMergedWords()\n  const prog    = JSON.parse(localStorage.getItem('vocabProgress') || '{}')\n  const deleted = JSON.parse(localStorage.getItem(STORAGE_KEY_DELETED) || '[]')\n\n  return all.filter(w =>\n    !prog[w.id]?.knownByUser &&\n    !deleted.includes(String(w.id))\n  )\n}\n\nexport default function TrainPage() {\n  const [mode, setMode] = useState(null)\n\n  const { data: trainWords = [], isLoading, isError } = useQuery({\n    queryKey: ['trainWords', mode],\n    queryFn: fetchTrainWords,\n    enabled: Boolean(mode),\n    refetchOnWindowFocus: false,\n    staleTime: 5 * 60_000,\n  })\n\n  if (mode === null) {\n    return (\n      <div className={styles.page}>\n        <h2 className={styles.title}>Выберите режим</h2>\n        <div className={styles.selection}>\n          <button className={styles.largeButton} onClick={() => setMode('flip')}>\n            Переверни карточку\n          </button>\n          <button className={styles.largeButton} onClick={() => setMode('test')}>\n            Тест\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  if (isLoading) return <p className={styles.status}>Загрузка слов…</p>\n  if (isError)   return <p className={styles.status}>Ошибка при загрузке</p>\n\n  if (trainWords.length === 0) {\n    return (\n      <div className={styles.page}>\n        <h2 className={styles.status}>Поздравляем, все слова выучены! 🎉</h2>\n        <div className={styles.emptyActions}>\n          <Link to=\"/vocab\" className={styles.linkButton}>Мой словарный запас</Link>\n          <Link to=\"/add\"   className={styles.linkButton}>Добавить новые слова</Link>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className={styles.page}>\n      <button className={styles.backToMenu} onClick={() => setMode(null)}>\n        ← Назад к выбору режима\n      </button>\n      {mode === 'flip'\n        ? <FlipCardGame words={trainWords} />\n        : <TestGame     words={trainWords} />\n      }\n    </div>\n  )\n}\n","export const QUERY_KEYS = {\n  // Основные запросы слов\n  WORDS: ['words'],\n  WORDS_FULL: ['wordsFull'],\n\n  // Тренировочные слова\n  TRAIN_WORDS: ['trainWords'],\n\n  // Словарный запас\n  VOCAB_WORDS: ['vocabWords'],\n}","export function getFromStorage(key) {\n  try {\n    return JSON.parse(localStorage.getItem(key)) || [];\n  } catch {\n    return [];\n  }\n}\n\nexport function setToStorage(key, data) {\n  localStorage.setItem(key, JSON.stringify(data));\n}\n","import axios from 'axios';\nimport { getFromStorage, setToStorage } from '../utils/storage';\n\nconst API_URL = process.env.REACT_APP_API_URL;\n\nexport const STORAGE_KEY_ADDED   = 'addedWords';\nexport const STORAGE_KEY_DELETED = 'deletedWords';\n\nexport const fetchWordsFromServer  = () =>\n  axios.get(`${API_URL}/words`).then(r => r.data);\n\nexport const addWordOnServer       = (word) =>\n  axios.post(`${API_URL}/words`, word).then(r => r.data);\n\nexport const updateWordOnServer    = (word) =>\n  axios.put(`${API_URL}/words/${word.id}`, word).then(r => r.data);\n\nexport const deleteWordOnServer    = (id) =>\n  axios.delete(`${API_URL}/words/${id}`);\n\n/* ────────────── ADD (он-/офлайн) ────────────── */\nexport async function addWord(word) {\n  try {\n    const data = await addWordOnServer(word);       \n\n    if (data?.id != null) {\n      const withoutDup = getFromStorage(STORAGE_KEY_ADDED)\n        .filter(w => String(w.english).toLowerCase() !== word.english.toLowerCase());\n      setToStorage(STORAGE_KEY_ADDED, withoutDup);\n      return data;         \n    }\n  } catch (_) {\n  }\n\n  const entry  = { id: `local-${Date.now()}`, ...word };\n  const added  = getFromStorage(STORAGE_KEY_ADDED);\n  setToStorage(STORAGE_KEY_ADDED, [...added, entry]);\n  return entry;\n}\n\n/* ────────────── UPDATE ────────────── */\nexport async function updateWord(word) {\n  const data  = await updateWordOnServer(word);\n  const id    = typeof data.id === 'number' ? data.id : word.id;\n  const entry = { id, ...word };\n\n  const merged = getFromStorage(STORAGE_KEY_ADDED)\n    .filter(w => String(w.id) !== String(id));\n  setToStorage(STORAGE_KEY_ADDED, [...merged, entry]);\n  return entry;\n}\n\n/* ────────────── DELETE ────────────── */\nexport async function deleteWord(id) {\n  if (!String(id).startsWith('local-')) {\n    await deleteWordOnServer(id);\n  }\n\n  const kept   = getFromStorage(STORAGE_KEY_ADDED)\n    .filter(w => String(w.id) !== String(id));\n  setToStorage(STORAGE_KEY_ADDED, kept);\n\n  const deleted = getFromStorage(STORAGE_KEY_DELETED);\n  if (!deleted.includes(String(id))) {\n    setToStorage(STORAGE_KEY_DELETED, [...deleted, String(id)]);\n  }\n  return id;\n}\n\n/* ────────────── MERGED LIST ────────────── */\nexport async function fetchMergedWords() {\n  const server = await fetchWordsFromServer();\n  const deleted = getFromStorage(STORAGE_KEY_DELETED);\n  const added   = getFromStorage(STORAGE_KEY_ADDED);\n\n  const filtered = server.filter(w => !deleted.includes(String(w.id)));\n  const merged   = filtered.map(w =>\n    added.find(a => String(a.id) === String(w.id)) || w\n  );\n  const extras = added.filter(a =>\n    !filtered.find(w => String(w.id) === String(a.id))\n  );\n  return [...merged, ...extras];\n}\n","import { useState, useEffect } from 'react'\n\nconst STORAGE_KEY = 'vocabProgress'\nconst DEFAULT = { correctStreak: 0, knownByUser: false }\n\n/**\n * Хук хранит для каждого wordId:\n *  - correctStreak: сколько раз подряд угадано в тесте\n *  - knownByUser\n *\n * Возвращает [state, saveProgress, resetProgress]\n */\nexport function useProgress(wordId) {\n  const [state, setState] = useState(DEFAULT)\n\n  useEffect(() => {\n    const all = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}')\n    setState(all[wordId] || DEFAULT)\n  }, [wordId])\n\n  const saveProgress = updates => {\n    setState(prev => {\n      const next = { ...prev, ...updates }\n      const all  = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}')\n      all[wordId] = next\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(all))\n      return next\n    })\n  }\n\n  const resetProgress = () => {\n    setState(DEFAULT)\n    const all = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}')\n    delete all[wordId]\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(all))\n  }\n\n  return [state, saveProgress, resetProgress]\n}\n\n/**\n * Глобальная функция для сброса прогресса вне компонента\n */\nexport function resetProgress(wordId) {\n  const all = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}')\n  delete all[wordId]\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(all))\n}\n"],"names":["WordCard","_ref","english","transcription","russian","flipped","setFlipped","useState","iconRef","useRef","useEffect","current","focus","toggleFlip","e","stopPropagation","f","_jsx","className","styles","cardWrapper","onClick","children","_jsxs","concat","card","isFlipped","cardFront","ref","flipIcon","role","tabIndex","onKeyDown","key","preventDefault","cardBack","translation","FlipCardGame","_currentWord$id","words","qc","useQueryClient","idx","setIdx","direction","setDirection","marked","setMarked","learnedCount","setLearnedCount","safeIndex","Array","isArray","length","Math","min","currentWord","id","progress","saveProgress","useProgress","goPrev","useCallback","i","goNext","onKey","window","addEventListener","removeEventListener","container","_Fragment","learnedCounter","AnimatePresence","initial","custom","motion","div","variants","enter","dir","rotateY","opacity","transformOrigin","center","transition","duration","exit","animate","cardMotion","checkButton","knownByUser","invalidateQueries","queryKey","QUERY_KEYS","TRAIN_WORDS","VOCAB_WORDS","c","setTimeout","disabled","controls","status","shuffle","arr","map","v","sort","random","value","a","b","o","useTestGameLogic","celebrating","setCelebrating","displayedStreak","setDisplayedStreak","selected","setSelected","isCorrect","setIsCorrect","data","allWords","isLoading","allLoading","isError","allError","useQuery","WORDS_FULL","queryFn","fetchMergedWords","refetchOnWindowFocus","staleTime","empty","word","currentId","next","reset","_word$id","index","setIndex","prev","useWordNavigation","correctStreak","options","correctAnswer","useMemo","_correctVal$toLowerCa","_correctVal$toLowerCa2","correctVal","correctLower","toLowerCase","call","poolRaw","filter","w","t","Set","slice","filler","floor","push","useOptions","invalidateTrainAndVocab","handleClearSelection","handleSelect","choice","isCorrectChoice","nextStreak","update","handleScreenClick","rawCount","displayCount","TestGameUI","props","wordsLength","Spinner","toggle","active","prompt","max","opt","correct","wrong","celebration","footer","ok","err","nextButton","resetButton","TestGame","logic","_objectSpread","async","fetchTrainWords","all","prog","JSON","parse","localStorage","getItem","deleted","STORAGE_KEY_DELETED","_prog$w$id","includes","String","TrainPage","mode","setMode","trainWords","enabled","Boolean","page","title","selection","largeButton","emptyActions","Link","to","linkButton","backToMenu","WORDS","getFromStorage","_unused","setToStorage","setItem","stringify","API_URL","process","STORAGE_KEY_ADDED","fetchWordsFromServer","axios","get","then","r","addWordOnServer","post","updateWordOnServer","put","deleteWordOnServer","delete","addWord","withoutDup","_","entry","Date","now","added","updateWord","merged","deleteWord","startsWith","kept","server","filtered","find","STORAGE_KEY","DEFAULT","wordId","state","setState","updates","resetProgress"],"sourceRoot":""}