{"version":3,"file":"static/js/774.8d001671.chunk.js","mappings":"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","sources":["utils/validation.js","webpack://english-flashcards/./src/components/words/AddWordForm/AddWordForm.module.scss?ff72","components/words/AddWordForm/AddWordForm.jsx","hooks/base/useForm.js","hooks/words/useValidation.js","webpack://english-flashcards/./src/pages/AddWordPage/AddWordPage.module.scss?fb1a","pages/AddWordPage/AddWordPage.jsx","../node_modules/@tanstack/query-core/src/mutationObserver.ts","../node_modules/@tanstack/react-query/src/useMutation.ts","constants/queryKeys.js","utils/storage.js","api/words.js"],"sourcesContent":["export const ERROR_MESSAGES = {\n  REQUIRED     : 'Это поле обязательно для заполнения',\n  ENGLISH_WORD : 'Используйте только английские буквы, пробелы, дефисы и апострофы',\n  TRANSCRIPTION: 'Используйте корректные символы транскрипции',\n  RUSSIAN_WORD : 'Используйте только русские буквы, пробелы и дефисы',\n  MIN_LENGTH   : min => `Минимальная длина ${min} символов`,\n  MAX_LENGTH   : max => `Максимальная длина ${max} символов`,\n};\n\nconst PATTERNS = {\n  ENGLISH_WORD : /^[A-Za-z\\s'-]+$/,\n  TRANSCRIPTION: /^[a-zA-Z\\u0250-\\u02AF\\u02C8\\u02CC\\u02D0\\s'ːˈˌ]+$/,\n  RUSSIAN_WORD : /^[А-Яа-яЁё\\s-]+$/,\n};\n\nexport const validators = {\n  required: value =>\n    value && value.trim() ? null : ERROR_MESSAGES.REQUIRED,\n\n  englishWord: value =>\n    !value || !value.trim() || PATTERNS.ENGLISH_WORD.test(value)\n      ? null\n      : ERROR_MESSAGES.ENGLISH_WORD,\n\n  transcription: value => {\n    if (!value || !value.trim()) return null;       \n    const pure = value.replace(/\\[|\\]/g, '');       \n    return PATTERNS.TRANSCRIPTION.test(pure)\n      ? null\n      : ERROR_MESSAGES.TRANSCRIPTION;\n  },\n\n  russianWord: value =>\n    !value || !value.trim() || PATTERNS.RUSSIAN_WORD.test(value)\n      ? null\n      : ERROR_MESSAGES.RUSSIAN_WORD,\n\n  minLength: min => value =>\n    !value || !value.trim() || value.length >= min\n      ? null\n      : ERROR_MESSAGES.MIN_LENGTH(min),\n\n  maxLength: max => value =>\n    !value || !value.trim() || value.length <= max\n      ? null\n      : ERROR_MESSAGES.MAX_LENGTH(max),\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"AddWordForm_form__3YoZc\",\"field\":\"AddWordForm_field__CR9-8\",\"input\":\"AddWordForm_input__GQ-nM\",\"errorInput\":\"AddWordForm_errorInput__4f3O7\",\"caption\":\"AddWordForm_caption__Ybb5y\",\"asterisk\":\"AddWordForm_asterisk__D6XWX\",\"button\":\"AddWordForm_button__eQWs4\",\"buttonInactive\":\"AddWordForm_buttonInactive__EVScR\",\"success\":\"AddWordForm_success__oroQ-\",\"error\":\"AddWordForm_error__5DqMM\"};","import React from 'react'\nimport { useMutation, useQueryClient } from '@tanstack/react-query'\nimport { addWord } from '../../../api/words'\nimport { QUERY_KEYS } from '../../../constants/queryKeys'\nimport { useForm } from '../../../hooks/base/useForm'\nimport { useValidation } from '../../../hooks/words/useValidation'\nimport styles from './AddWordForm.module.scss'\n\nconst FIELDS = {\n  english: { label: 'Слово (англ.)', rules: ['required', 'englishWord'] },\n  transcription: { label: 'Транскрипция', rules: ['required', 'transcription'] },\n  russian: { label: 'Перевод', rules: ['required', 'russianWord'] },\n  tags: { label: 'Тема', rules: [] },\n}\n\nexport default function AddWordForm() {\n  const qc = useQueryClient()\n\n  const [newWord, handleChange, resetForm] = useForm(\n    Object.keys(FIELDS).reduce((acc, key) => ({ ...acc, [key]: '' }), {})\n  )\n\n  const { errors, validateForm } = useValidation(FIELDS, newWord)\n\n  const [success, setSuccess] = React.useState(false)\n  const [error,   setError]   = React.useState('')\n  const [touched, setTouched] = React.useState(false)\n\n  const mutation = useMutation({\n    mutationFn: addWord,\n    onSuccess: () => {\n      qc.invalidateQueries({ queryKey: QUERY_KEYS.WORDS_FULL })\n      setSuccess(true)\n      resetForm()\n      setTouched(false)\n    },\n    onError: () => setError('Не удалось добавить слово'),\n  })\n\n  const onSubmit = e => {\n    e.preventDefault()\n    setSuccess(false)\n    setError('')\n\n    const isValid = validateForm()\n    if (!isValid) {\n      setTouched(true)\n      setError('Пожалуйста, заполните все обязательные поля')\n      return\n    }\n\n    mutation.mutate(newWord)\n  }\n\n  return (\n    <form onSubmit={onSubmit} className={styles.form} noValidate>\n      {Object.entries(FIELDS).map(([name, { label, rules }]) => {\n        const isRequired = rules.includes('required')\n        const showError  = touched && errors[name]\n\n        return (\n          <label key={name} className={styles.field}>\n            <span className={styles.caption}>\n              {label}\n              {isRequired && <span className={styles.asterisk}>*</span>}:\n            </span>\n\n            <input\n              name={name}\n              value={newWord[name]}\n              onChange={handleChange}\n              className={`${styles.input} ${showError ? styles.errorInput : ''}`}\n            />\n\n            {showError && (\n              <span className={styles.errorNote}>{errors[name]}</span>\n            )}\n          </label>\n        )\n      })}\n\n      <button\n        type=\"submit\"\n        disabled={mutation.isPending}\n        className={`${styles.button} ${Object.keys(errors).length ? styles.buttonInactive : ''}`}\n      >\n        {mutation.isPending ? 'Добавляю…' : 'Добавить'}\n      </button>\n\n      {success && <p className={styles.success}>✅ Добавлено!</p>}\n      {error   && <p className={styles.error}>❌ {error}</p>}\n    </form>\n  )\n}\n","import { useState } from 'react'\n\nexport function useForm(initial) {\n  const [values, setValues] = useState(initial)\n  const handleChange = e => {\n    const { name, value } = e.target\n    setValues(prev => ({ ...prev, [name]: value }))\n  }\n  const reset = () => setValues(initial)\n  return [values, handleChange, reset]\n}\n","import { useCallback, useState } from 'react'\nimport { validators } from '../../utils/validation'\n\nexport function useValidation(schema, values) {\n  const [errors, setErrors] = useState({})\n\n  const validateField = useCallback((fieldName) => {\n    const { rules = [] } = schema[fieldName] || {}\n    for (const rule of rules) {\n      const validator =\n        typeof rule === 'string' ? validators[rule] :\n        typeof rule === 'function' ? rule :\n        null\n\n      if (!validator) continue\n\n      const error = validator(values[fieldName] ?? '')\n      if (error) return error\n    }\n    return null\n  }, [schema, values])\n\n  const validateForm = useCallback(() => {\n    const result = {}\n    Object.keys(schema).forEach(name => {\n      const error = validateField(name)\n      if (error) result[name] = error\n    })\n    setErrors(result)\n    return Object.keys(result).length === 0\n  }, [schema, validateField])\n\n  return { errors, validateField, validateForm }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"addWordPage\":\"AddWordPage_addWordPage__WFs9K\",\"title\":\"AddWordPage_title__JXZ2w\",\"formWrapper\":\"AddWordPage_formWrapper__S9MIc\"};","import React from 'react';\nimport AddWordForm from '../../components/words/AddWordForm/AddWordForm';\nimport styles from './AddWordPage.module.scss';\n\nexport default function AddWordPage() {\n  return (\n    <div className={styles.addWordPage}>\n      <h2 className={styles.title}>Добавить новое слово</h2>\n      <div className={styles.formWrapper}>\n        <AddWordForm />\n      </div>\n    </div>\n  );\n}\n","import { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport { Subscribable } from './subscribable'\nimport { shallowEqualObjects } from './utils'\nimport type { QueryClient } from './queryClient'\nimport type {\n  MutateOptions,\n  MutationObserverBaseResult,\n  MutationObserverOptions,\n  MutationObserverResult,\n} from './types'\nimport type { Action, Mutation } from './mutation'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options\n    this.options = this.client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.currentMutation,\n        observer: this,\n      })\n    }\n    this.currentMutation?.setOptions(this.options)\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables:\n        typeof variables !== 'undefined' ? variables : this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    const isLoading = state.status === 'loading'\n    const result: MutationObserverBaseResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    > = {\n      ...state,\n      isLoading,\n      isPending: isLoading,\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n\n    this.currentResult = result as MutationObserverResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    >\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions && this.hasListeners()) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!,\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach(({ listener }) => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n","'use client'\nimport * as React from 'react'\nimport {\n  MutationObserver,\n  notifyManager,\n  parseMutationArgs,\n} from '@tanstack/query-core'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport { useQueryClient } from './QueryClientProvider'\nimport { shouldThrowError } from './utils'\nimport type { MutationFunction, MutationKey } from '@tanstack/query-core'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationFn: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  mutationFn?: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey' | 'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  arg1:\n    | MutationKey\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg2?:\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg3?: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const options = parseMutationArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient({ context: options.context })\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        queryClient,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.useErrorBoundary, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\n","export const QUERY_KEYS = {\n  // Основные запросы слов\n  WORDS: ['words'],\n  WORDS_FULL: ['wordsFull'],\n\n  // Тренировочные слова\n  TRAIN_WORDS: ['trainWords'],\n\n  // Словарный запас\n  VOCAB_WORDS: ['vocabWords'],\n}","/**\n * Утилиты для работы с localStorage\n */\nexport function getFromStorage(key) {\n  try {\n    return JSON.parse(localStorage.getItem(key)) || [];\n  } catch {\n    return [];\n  }\n}\n\nexport function setToStorage(key, data) {\n  localStorage.setItem(key, JSON.stringify(data));\n}\n","import axios from 'axios'\nimport { getFromStorage, setToStorage } from '../utils/storage'\n\nconst API_URL = process.env.REACT_APP_API_URL\n\nexport const STORAGE_KEY_ADDED   = 'addedWords'\nexport const STORAGE_KEY_DELETED = 'deletedWords'\n\nexport function fetchWordsFromServer() {\n  return axios.get(`${API_URL}/words`).then(res => res.data)\n}\nexport function addWordOnServer(word) {\n  return axios.post(`${API_URL}/words`, word).then(res => res.data)\n}\nexport function updateWordOnServer(word) {\n  return axios.put(`${API_URL}/words/${word.id}`, word).then(res => res.data)\n}\nexport function deleteWordOnServer(id) {\n  return axios.delete(`${API_URL}/words/${id}`)\n}\n\n/**\n * Обёртка: POST + локальное сохранение\n */\nexport async function addWord(word) {\n  const data = await addWordOnServer(word)\n  const id   = typeof data.id === 'number' ? data.id : `local-${Date.now()}`\n  const entry = { id, ...word }\n\n  const added = getFromStorage(STORAGE_KEY_ADDED)\n  setToStorage(STORAGE_KEY_ADDED, [...added, entry])\n\n  return entry\n}\n\n/**\n * Обёртка: PUT + локальная синхронизация\n */\nexport async function updateWord(word) {\n  const data = await updateWordOnServer(word)\n  const id   = typeof data.id === 'number' ? data.id : word.id\n  const entry = { id, ...word }\n\n  const added = getFromStorage(STORAGE_KEY_ADDED)\n    .filter(w => String(w.id) !== String(id))\n  setToStorage(STORAGE_KEY_ADDED, [...added, entry])\n\n  return entry\n}\n\n/**\n * Обёртка: DELETE + учёт удалённых\n */\nexport async function deleteWord(id) {\n  if (!String(id).startsWith('local-')) {\n    await deleteWordOnServer(id)\n  }\n\n  const added = getFromStorage(STORAGE_KEY_ADDED)\n    .filter(w => String(w.id) !== String(id))\n  setToStorage(STORAGE_KEY_ADDED, added)\n\n  const deleted = getFromStorage(STORAGE_KEY_DELETED)\n  if (!deleted.includes(String(id))) {\n    setToStorage(STORAGE_KEY_DELETED, [...deleted, String(id)])\n  }\n\n  return id\n}\n\n/**\n * Получить «слитые» слова:\n * — серверные без удалённых\n * — заменённые локальными\n * — добавленные локально\n */\nexport async function fetchMergedWords() {\n  const serverWords = await fetchWordsFromServer()\n  const deleted     = getFromStorage(STORAGE_KEY_DELETED)\n  const added       = getFromStorage(STORAGE_KEY_ADDED)\n\n  const filtered = serverWords.filter(w => !deleted.includes(String(w.id)))\n  const merged   = filtered.map(w =>\n    added.find(a => String(a.id) === String(w.id)) || w\n  )\n  const extras   = added.filter(a =>\n    !filtered.find(w => String(w.id) === String(a.id))\n  )\n\n  return [...merged, ...extras]\n}\n"],"names":["ERROR_MESSAGES","min","concat","max","PATTERNS","ENGLISH_WORD","TRANSCRIPTION","RUSSIAN_WORD","validators","required","value","trim","englishWord","test","transcription","pure","replace","russianWord","minLength","length","maxLength","FIELDS","english","label","rules","russian","tags","AddWordForm","qc","useQueryClient","newWord","handleChange","resetForm","initial","values","setValues","useState","e","name","target","prev","_objectSpread","reset","useForm","Object","keys","reduce","acc","key","errors","validateForm","schema","setErrors","validateField","useCallback","fieldName","rule","_values$fieldName","validator","error","result","forEach","useValidation","success","setSuccess","React","setError","touched","setTouched","mutation","useMutation","mutationFn","addWord","onSuccess","invalidateQueries","queryKey","QUERY_KEYS","WORDS_FULL","onError","_jsxs","onSubmit","preventDefault","mutate","className","styles","form","noValidate","children","entries","map","_ref","isRequired","includes","showError","field","caption","_jsx","asterisk","onChange","input","errorInput","errorNote","type","disabled","isPending","button","buttonInactive","AddWordPage","addWordPage","title","formWrapper","MutationObserver","Subscribable","constructor","client","options","super","this","setOptions","bindMethods","updateResult","bind","_this$currentMutation","prevOptions","defaultMutationOptions","shallowEqualObjects","getMutationCache","notify","currentMutation","observer","onUnsubscribe","_this$currentMutation2","hasListeners","removeObserver","onMutationUpdate","action","notifyOptions","listeners","getCurrentResult","currentResult","undefined","variables","mutateOptions","build","addObserver","execute","state","getDefaultState","isLoading","status","isSuccess","isError","isIdle","notifyManager","batch","_this$mutateOptions$o","_this$mutateOptions","_this$mutateOptions$o2","_this$mutateOptions2","call","data","context","onSettled","_this$mutateOptions$o3","_this$mutateOptions3","_this$mutateOptions$o4","_this$mutateOptions4","listener","arg1","arg2","arg3","queryClient","useSyncExternalStore","onStoreChange","subscribe","batchCalls","shouldThrowError","useErrorBoundary","noop","WORDS","TRAIN_WORDS","VOCAB_WORDS","getFromStorage","JSON","parse","localStorage","getItem","_unused","setToStorage","setItem","stringify","API_URL","process","STORAGE_KEY_ADDED","STORAGE_KEY_DELETED","async","word","axios","post","then","res","addWordOnServer","id","Date","now","entry","added","updateWord","put","updateWordOnServer","filter","w","String","deleteWord","startsWith","delete","deleteWordOnServer","deleted","fetchMergedWords","serverWords","get","filtered","find","a"],"sourceRoot":""}