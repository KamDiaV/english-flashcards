{"version":3,"file":"static/js/241.115bfb14.chunk.js","mappings":"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","sources":["../node_modules/@tanstack/query-core/src/mutationObserver.ts","../node_modules/@tanstack/react-query/src/useMutation.ts","webpack://english-flashcards/./src/components/words/AddWordForm/AddWordForm.module.scss?ff72","components/words/AddWordForm/AddWordForm.jsx","hooks/useForm.js","webpack://english-flashcards/./src/pages/AddWordPage/AddWordPage.module.scss?fb1a","pages/AddWordPage/AddWordPage.jsx","api/words.js"],"sourcesContent":["import { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport { Subscribable } from './subscribable'\nimport { shallowEqualObjects } from './utils'\nimport type { QueryClient } from './queryClient'\nimport type {\n  MutateOptions,\n  MutationObserverBaseResult,\n  MutationObserverOptions,\n  MutationObserverResult,\n} from './types'\nimport type { Action, Mutation } from './mutation'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options\n    this.options = this.client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.currentMutation,\n        observer: this,\n      })\n    }\n    this.currentMutation?.setOptions(this.options)\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables:\n        typeof variables !== 'undefined' ? variables : this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    const result: MutationObserverBaseResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    > = {\n      ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n\n    this.currentResult = result as MutationObserverResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    >\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions && this.hasListeners()) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!,\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach(({ listener }) => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n","'use client'\nimport * as React from 'react'\nimport {\n  MutationObserver,\n  notifyManager,\n  parseMutationArgs,\n} from '@tanstack/query-core'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport { useQueryClient } from './QueryClientProvider'\nimport { shouldThrowError } from './utils'\nimport type { MutationFunction, MutationKey } from '@tanstack/query-core'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationFn: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  mutationFn?: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey' | 'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  arg1:\n    | MutationKey\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg2?:\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg3?: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const options = parseMutationArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient({ context: options.context })\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        queryClient,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.useErrorBoundary, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"AddWordForm_form__3YoZc\",\"field\":\"AddWordForm_field__CR9-8\",\"input\":\"AddWordForm_input__GQ-nM\",\"button\":\"AddWordForm_button__eQWs4\",\"success\":\"AddWordForm_success__oroQ-\",\"error\":\"AddWordForm_error__5DqMM\"};","import React from 'react'\nimport { useMutation, useQueryClient } from '@tanstack/react-query'\nimport { addWord }                     from '../../../api/words'\nimport { useForm }                     from '../../../hooks/useForm'\nimport styles                          from './AddWordForm.module.scss'\n\nconst FIELDS = [\n  { name: 'english',      label: 'Слово (англ.)',    required: true },\n  { name: 'transcription',label: 'Транскрипция' },\n  { name: 'russian',      label: 'Перевод',          required: true },\n  { name: 'tags',         label: 'Тема' }\n]\n\nexport default function AddWordForm() {\n  const qc = useQueryClient()\n\n  const [newWord, handleChange, resetForm] = useForm({\n    english: '', transcription: '', russian: '', tags: ''\n  })\n  const [success, setSuccess] = React.useState(false)\n  const [error,   setError]   = React.useState('')\n\n  const mutation = useMutation(\n    addWord,\n    {\n      onSuccess: () => {\n        qc.invalidateQueries(['words'])\n        setSuccess(true)\n        setError('')\n        resetForm()\n      },\n      onError: () => {\n        setError('Не удалось добавить слово')\n        setSuccess(false)\n      }\n    }\n  )\n\n  const onSubmit = e => {\n    e.preventDefault()\n    setSuccess(false)\n    setError('')\n    mutation.mutate(newWord)\n  }\n\n  return (\n    <form onSubmit={onSubmit} className={styles.form}>\n      {FIELDS.map(({name,label,required}) => (\n        <label key={name} className={styles.field}>\n          {label}:\n          <input\n            name={name}\n            value={newWord[name]}\n            onChange={handleChange}\n            required={required}\n            className={styles.input}\n          />\n        </label>\n      ))}\n\n      <button\n        type=\"submit\"\n        disabled={mutation.isLoading}\n        className={styles.button}\n      >\n        {mutation.isLoading ? 'Добавляю…' : 'Добавить'}\n      </button>\n\n      {success && <p className={styles.success}>✅ Добавлено!</p>}\n      {error   && <p className={styles.error}>❌ {error}</p>}\n    </form>\n  )\n}\n","import { useState } from 'react'\n\nexport function useForm(initial) {\n  const [values, setValues] = useState(initial)\n  const handleChange = e => {\n    const { name, value } = e.target\n    setValues(prev => ({ ...prev, [name]: value }))\n  }\n  const reset = () => setValues(initial)\n  return [values, handleChange, reset]\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"addWordPage\":\"AddWordPage_addWordPage__WFs9K\",\"title\":\"AddWordPage_title__JXZ2w\",\"formWrapper\":\"AddWordPage_formWrapper__S9MIc\"};","import React from 'react';\nimport AddWordForm from '../../components/words/AddWordForm/AddWordForm';\nimport styles from './AddWordPage.module.scss';\n\nexport default function AddWordPage() {\n  return (\n    <div className={styles.addWordPage}>\n      <h2 className={styles.title}>Добавить новое слово</h2>\n      <div className={styles.formWrapper}>\n        <AddWordForm />\n      </div>\n    </div>\n  );\n}\n","import axios from 'axios'\n\nconst API_URL = process.env.REACT_APP_API_URL\n\nexport const STORAGE_KEY_ADDED   = 'addedWords'\nexport const STORAGE_KEY_DELETED = 'deletedWords'\n\n/**\n * Получаем данные с сервера (без учёта локальных изменений)\n */\nexport function fetchWordsFromServer() {\n  return axios\n    .get(`${API_URL}/words`)\n    .then(res => res.data)\n}\n\n/**\n * Добавляем новое слово\n */\nexport function addWordOnServer(word) {\n  return axios\n    .post(`${API_URL}/words`, word)\n    .then(res => res.data)\n}\n\n/**\n * Обновляем слово на сервере\n */\nexport function updateWordOnServer(word) {\n  return axios\n    .put(`${API_URL}/words/${word.id}`, word)\n    .then(res => res.data)\n}\n\n/**\n * Удаляем слово на сервере\n */\nexport function deleteWordOnServer(id) {\n  return axios.delete(`${API_URL}/words/${id}`)\n}\n\n/**\n * Обёртка: POST + локальное сохранение\n */\nexport async function addWord(word) {\n  const data = await addWordOnServer(word)\n  const id = typeof data.id === 'number' ? data.id : `local-${Date.now()}`\n\n  const entry = {\n    id,\n    english: word.english,\n    transcription: word.transcription,\n    russian: word.russian,\n    tags: word.tags\n  }\n\n  const stored = JSON.parse(localStorage.getItem(STORAGE_KEY_ADDED) || '[]')\n  localStorage.setItem(\n    STORAGE_KEY_ADDED,\n    JSON.stringify([...stored, entry])\n  )\n\n  return entry\n}\n\n/**\n * Обёртка: PUT + локальная синхронизация (для редактирования локальных слов)\n */\nexport async function updateWord(word) {\n  const data = await updateWordOnServer(word)\n  const id = typeof data.id === 'number' ? data.id : word.id\n\n  const entry = {\n    id,\n    english:      word.english,\n    transcription: word.transcription,\n    russian:      word.russian,\n    tags:         word.tags\n  }\n\n  const stored = JSON.parse(localStorage.getItem(STORAGE_KEY_ADDED) || '[]')\n    .filter(w => String(w.id) !== String(id))\n  localStorage.setItem(\n    STORAGE_KEY_ADDED,\n    JSON.stringify([...stored, entry])\n  )\n\n  return entry\n}\n\n/**\n * Обёртка: DELETE + пометка в deletedWords\n */\nexport async function deleteWord(id) {\n  if (!String(id).startsWith('local-')) {\n    await deleteWordOnServer(id)\n  }\n\n  const added = JSON.parse(localStorage.getItem(STORAGE_KEY_ADDED) || '[]')\n    .filter(w => String(w.id) !== String(id))\n  localStorage.setItem(\n    STORAGE_KEY_ADDED,\n    JSON.stringify(added)\n  )\n\n  const deleted = JSON.parse(localStorage.getItem(STORAGE_KEY_DELETED) || '[]')\n  if (!deleted.includes(String(id))) {\n    deleted.push(String(id))\n    localStorage.setItem(\n      STORAGE_KEY_DELETED,\n      JSON.stringify(deleted)\n    )\n  }\n\n  return id\n}\n\n/**\n * Получить слова серверные и локальные:\n *  1) Фетчим с сервера\n *  2) Отрезаем удалённые (deletedWords)\n *  3) Заменяем серверные на локальные правки (addedWords)\n *  4) Добавляем полностью новые из addedWords\n */\nexport async function fetchMergedWords() {\n  const serverWords = await fetchWordsFromServer()\n  const deleted = JSON.parse(localStorage.getItem(STORAGE_KEY_DELETED) || '[]')\n  const added = JSON.parse(localStorage.getItem(STORAGE_KEY_ADDED) || '[]')\n\n  const filtered = serverWords.filter(w => !deleted.includes(String(w.id)))\n\n  const merged = filtered.map(w =>\n    added.find(a => String(a.id) === String(w.id)) || w\n  )\n\n  const extras = added.filter(a =>\n    !filtered.find(w => String(w.id) === String(a.id))\n  )\n\n  return [...merged, ...extras]\n}\n"],"names":["MutationObserver","Subscribable","constructor","client","options","super","this","setOptions","bindMethods","updateResult","mutate","bind","reset","_this$currentMutation","prevOptions","defaultMutationOptions","shallowEqualObjects","getMutationCache","notify","type","mutation","currentMutation","observer","onUnsubscribe","_this$currentMutation2","hasListeners","removeObserver","onMutationUpdate","action","notifyOptions","listeners","onSuccess","onError","getCurrentResult","currentResult","undefined","variables","mutateOptions","build","addObserver","execute","state","getDefaultState","result","isLoading","status","isSuccess","isError","isIdle","notifyManager","batch","_this$mutateOptions$o","_this$mutateOptions","_this$mutateOptions$o2","_this$mutateOptions2","call","data","context","onSettled","_this$mutateOptions$o3","_this$mutateOptions3","_this$mutateOptions$o4","_this$mutateOptions4","error","forEach","_ref","listener","useMutation","arg1","arg2","arg3","React","queryClient","useSyncExternalStore","onStoreChange","subscribe","batchCalls","shouldThrowError","useErrorBoundary","noop","FIELDS","name","label","required","AddWordForm","qc","useQueryClient","newWord","handleChange","resetForm","initial","values","setValues","useState","e","value","target","prev","useForm","english","transcription","russian","tags","success","setSuccess","setError","addWord","invalidateQueries","_jsxs","onSubmit","preventDefault","className","styles","form","children","map","field","_jsx","onChange","input","disabled","button","AddWordPage","addWordPage","title","formWrapper","API_URL","process","STORAGE_KEY_ADDED","STORAGE_KEY_DELETED","async","word","axios","post","then","res","addWordOnServer","entry","id","Date","now","stored","JSON","parse","localStorage","getItem","setItem","stringify","updateWord","put","updateWordOnServer","filter","w","String","deleteWord","startsWith","delete","deleteWordOnServer","added","deleted","includes","push","fetchMergedWords","serverWords","get","filtered","find","a"],"sourceRoot":""}