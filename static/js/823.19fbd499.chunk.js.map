{"version":3,"file":"static/js/823.19fbd499.chunk.js","mappings":"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","sources":["constants/queryKeys.js","utils/storage.js","api/words.js","hooks/words/useProgress.js","webpack://english-flashcards/./src/components/words/WordCard/WordCard.module.scss?a298","components/words/WordCard/WordCard.jsx","webpack://english-flashcards/./src/components/words/FlipCardGame/FlipCardGame.module.scss?1d12","components/words/FlipCardGame/FlipCardGame.jsx","utils/shuffle.js","hooks/words/game/useTestGameLogic.js","hooks/words/useWordNavigation.js","hooks/base/useOptions.js","webpack://english-flashcards/./src/components/words/TestGame/TestGame.module.scss?a87f","components/words/TestGame/TestGameUI.jsx","components/words/TestGame/TestGame.jsx","webpack://english-flashcards/./src/pages/TrainPage/TrainPage.module.scss?4399","pages/TrainPage/TrainPage.jsx"],"sourcesContent":["export const QUERY_KEYS = {\n  // Основные запросы слов\n  WORDS: ['words'],\n  WORDS_FULL: ['wordsFull'],\n\n  // Тренировочные слова\n  TRAIN_WORDS: ['trainWords'],\n\n  // Словарный запас\n  VOCAB_WORDS: ['vocabWords'],\n}","/**\n * Утилиты для работы с localStorage\n */\nexport function getFromStorage(key) {\n  try {\n    return JSON.parse(localStorage.getItem(key)) || [];\n  } catch {\n    return [];\n  }\n}\n\nexport function setToStorage(key, data) {\n  localStorage.setItem(key, JSON.stringify(data));\n}\n","import axios from 'axios'\nimport { getFromStorage, setToStorage } from '../utils/storage'\n\nconst API_URL = process.env.REACT_APP_API_URL\n\nexport const STORAGE_KEY_ADDED   = 'addedWords'\nexport const STORAGE_KEY_DELETED = 'deletedWords'\n\nexport function fetchWordsFromServer() {\n  return axios.get(`${API_URL}/words`).then(res => res.data)\n}\nexport function addWordOnServer(word) {\n  return axios.post(`${API_URL}/words`, word).then(res => res.data)\n}\nexport function updateWordOnServer(word) {\n  return axios.put(`${API_URL}/words/${word.id}`, word).then(res => res.data)\n}\nexport function deleteWordOnServer(id) {\n  return axios.delete(`${API_URL}/words/${id}`)\n}\n\n/**\n * Обёртка: POST + локальное сохранение\n */\nexport async function addWord(word) {\n  const data = await addWordOnServer(word)\n  const id   = typeof data.id === 'number' ? data.id : `local-${Date.now()}`\n  const entry = { id, ...word }\n\n  const added = getFromStorage(STORAGE_KEY_ADDED)\n  setToStorage(STORAGE_KEY_ADDED, [...added, entry])\n\n  return entry\n}\n\n/**\n * Обёртка: PUT + локальная синхронизация\n */\nexport async function updateWord(word) {\n  const data = await updateWordOnServer(word)\n  const id   = typeof data.id === 'number' ? data.id : word.id\n  const entry = { id, ...word }\n\n  const added = getFromStorage(STORAGE_KEY_ADDED)\n    .filter(w => String(w.id) !== String(id))\n  setToStorage(STORAGE_KEY_ADDED, [...added, entry])\n\n  return entry\n}\n\n/**\n * Обёртка: DELETE + учёт удалённых\n */\nexport async function deleteWord(id) {\n  if (!String(id).startsWith('local-')) {\n    await deleteWordOnServer(id)\n  }\n\n  const added = getFromStorage(STORAGE_KEY_ADDED)\n    .filter(w => String(w.id) !== String(id))\n  setToStorage(STORAGE_KEY_ADDED, added)\n\n  const deleted = getFromStorage(STORAGE_KEY_DELETED)\n  if (!deleted.includes(String(id))) {\n    setToStorage(STORAGE_KEY_DELETED, [...deleted, String(id)])\n  }\n\n  return id\n}\n\n/**\n * Получить «слитые» слова:\n * — серверные без удалённых\n * — заменённые локальными\n * — добавленные локально\n */\nexport async function fetchMergedWords() {\n  const serverWords = await fetchWordsFromServer()\n  const deleted     = getFromStorage(STORAGE_KEY_DELETED)\n  const added       = getFromStorage(STORAGE_KEY_ADDED)\n\n  const filtered = serverWords.filter(w => !deleted.includes(String(w.id)))\n  const merged   = filtered.map(w =>\n    added.find(a => String(a.id) === String(w.id)) || w\n  )\n  const extras   = added.filter(a =>\n    !filtered.find(w => String(w.id) === String(a.id))\n  )\n\n  return [...merged, ...extras]\n}\n","import { useState, useEffect } from 'react'\n\nconst STORAGE_KEY = 'vocabProgress'\nconst DEFAULT = { correctStreak: 0, knownByUser: false }\n\n/**\n * Хук хранит для каждого wordId:\n *  - correctStreak: сколько раз подряд угадано в тесте\n *  - knownByUser\n *\n * Возвращает [state, saveProgress, resetProgress]\n */\nexport function useProgress(wordId) {\n  const [state, setState] = useState(DEFAULT)\n\n  useEffect(() => {\n    const all = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}')\n    setState(all[wordId] || DEFAULT)\n  }, [wordId])\n\n  const saveProgress = updates => {\n    setState(prev => {\n      const next = { ...prev, ...updates }\n      const all  = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}')\n      all[wordId] = next\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(all))\n      return next\n    })\n  }\n\n  const resetProgress = () => {\n    setState(DEFAULT)\n    const all = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}')\n    delete all[wordId]\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(all))\n  }\n\n  return [state, saveProgress, resetProgress]\n}\n\n/**\n * Глобальная функция для сброса прогресса вне компонента\n */\nexport function resetProgress(wordId) {\n  const all = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}')\n  delete all[wordId]\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(all))\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"cardWrapper\":\"WordCard_cardWrapper__jHn87\",\"flipIcon\":\"WordCard_flipIcon__dKwrp\",\"card\":\"WordCard_card__jVwgg\",\"isFlipped\":\"WordCard_isFlipped__ACnbb\",\"cardFront\":\"WordCard_cardFront__tkZO+\",\"cardBack\":\"WordCard_cardBack__iZQ0q\",\"english\":\"WordCard_english__5kBOo\",\"transcription\":\"WordCard_transcription__YMEiV\",\"translation\":\"WordCard_translation__xCCyt\"};","import React, { useState, useEffect, useRef } from 'react'\nimport styles from './WordCard.module.scss'\n\nexport default function WordCard({ english, transcription, russian }) {\n  const [flipped, setFlipped] = useState(false)\n  const iconRef = useRef(null)\n\n  useEffect(() => {\n    if (!flipped && iconRef.current) {\n      iconRef.current.focus()\n    }\n  }, [english, transcription, flipped])\n\n  const toggleFlip = e => {\n    e.stopPropagation()\n    setFlipped(f => !f)\n  }\n\n  return (\n    <div\n      className={styles.cardWrapper}\n      onClick={() => setFlipped(f => !f)}\n    >\n      <div className={`${styles.card} ${flipped ? styles.isFlipped : ''}`}>\n        <div className={styles.cardFront}>\n          <p className={styles.english}>{english}</p>\n          <p className={styles.transcription}>{transcription}</p>\n          <span\n            ref={iconRef}\n            className={styles.flipIcon}\n            onClick={toggleFlip}\n            role=\"button\"\n            tabIndex={0}\n            aria-label=\"Flip card\"\n            onKeyDown={e => {\n              if (e.key === 'Enter' || e.key === ' ') {\n                e.preventDefault()\n                toggleFlip(e)\n              }\n            }}\n          >\n            🔄\n          </span>\n        </div>\n        <div className={styles.cardBack}>\n          <p className={styles.translation}>{russian}</p>\n          <span\n            className={styles.flipIcon}\n            onClick={toggleFlip}\n            role=\"button\"\n            tabIndex={0}\n            aria-label=\"Flip card back\"\n          >\n            🔄\n          </span>\n        </div>\n      </div>\n    </div>\n  )\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"FlipCardGame_container__9peXM\",\"cardWrapper\":\"FlipCardGame_cardWrapper__e66if\",\"cardMotion\":\"FlipCardGame_cardMotion__ovtHr\",\"learnedCounter\":\"FlipCardGame_learnedCounter__QZj3u\",\"checkButton\":\"FlipCardGame_checkButton__427CO\",\"controls\":\"FlipCardGame_controls__-ewaO\",\"status\":\"FlipCardGame_status__0RBR1\"};","import React, { useState, useEffect, useCallback } from 'react'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport { useQueryClient } from '@tanstack/react-query'\nimport { useProgress } from '../../../hooks/words/useProgress'\nimport { QUERY_KEYS } from '../../../constants/queryKeys'\nimport WordCard from '../WordCard/WordCard'\nimport styles from './FlipCardGame.module.scss'\n\nexport default function FlipCardGame({ words }) {\n  const qc = useQueryClient()\n\n  const [idx, setIdx] = useState(0)\n  const [direction, setDirection] = useState(1)\n  const [marked, setMarked] = useState(false)\n\n  const [learnedCount, setLearnedCount] = useState(0)\n\n  const safeIndex = Array.isArray(words) && words.length\n    ? Math.min(idx, words.length - 1)\n    : 0\n\n  const currentWord = Array.isArray(words) && words.length\n    ? words[safeIndex]\n    : { id: null, english: '', transcription: '', russian: '' }\n\n  const [progress, saveProgress] = useProgress(currentWord.id ?? '')\n\n  const goPrev = useCallback(() => {\n    if (!words?.length || safeIndex === 0) return\n    setDirection(-1)\n    setIdx(i => i - 1)\n  }, [safeIndex, words])\n\n  const goNext = useCallback(() => {\n    if (!words?.length || safeIndex === words.length - 1) return\n    setDirection(1)\n    setIdx(i => i + 1)\n  }, [safeIndex, words])\n\n  function handleMarkKnown() {\n    saveProgress({ knownByUser: true })\n    qc.invalidateQueries({ queryKey: QUERY_KEYS.TRAIN_WORDS })\n    qc.invalidateQueries({ queryKey: QUERY_KEYS.VOCAB_WORDS })\n    setMarked(true)\n  \n    setLearnedCount(c => c + 1)\n  \n    setTimeout(() => {\n      setMarked(false)\n      goNext()\n    }, 500)\n  }\n\n  useEffect(() => {\n    function onKey(e) {\n      if (e.key === 'ArrowLeft') {\n        e.preventDefault()\n        goPrev()\n      } else if (e.key === 'ArrowRight') {\n        e.preventDefault()\n        goNext()\n      }\n    }\n    window.addEventListener('keydown', onKey)\n    return () => window.removeEventListener('keydown', onKey)\n  }, [goPrev, goNext])\n\n  const variants = {\n    enter: dir => ({\n      rotateY: dir > 0 ? 90 : -90,\n      opacity: 0,\n      transformOrigin: dir > 0 ? 'left center' : 'right center',\n    }),\n    center: {\n      rotateY: 0,\n      opacity: 1,\n      transformOrigin: 'center center',\n      transition: { duration: 0.5 },\n    },\n    exit: dir => ({\n      rotateY: dir > 0 ? -90 : 90,\n      opacity: 0,\n      transformOrigin: dir > 0 ? 'right center' : 'left center',\n      transition: { duration: 0.4 },\n    }),\n  }\n\n  return (\n    <div className={styles.container}>\n      {!words?.length ? (\n        <p className={styles.status}>Нет слов для тренировки.</p>\n      ) : (\n        <>\n          <div className={styles.learnedCounter}>\n            Выучено слов за эту тренировку: <strong>{learnedCount}</strong>\n          </div>\n\n          <div className={styles.cardWrapper}>\n            <AnimatePresence initial={false} custom={direction}>\n              <motion.div\n                key={currentWord.id}\n                custom={direction}\n                variants={variants}\n                initial=\"enter\"\n                animate={marked ? 'exit' : 'center'}\n                exit=\"exit\"\n                transition={{ duration: 0.5 }}\n                className={styles.cardMotion}\n              >\n                <WordCard\n                  english={currentWord.english}\n                  transcription={currentWord.transcription}\n                  russian={currentWord.russian}\n                />\n              </motion.div>\n            </AnimatePresence>\n          </div>\n\n          <button\n            className={styles.checkButton}\n            onClick={handleMarkKnown}\n            disabled={marked}\n          >\n            Отметить как знаю\n          </button>\n\n          <div className={styles.controls}>\n            <button onClick={goPrev} disabled={safeIndex === 0}>\n              ←\n            </button>\n            <button onClick={goNext} disabled={safeIndex === words.length - 1}>\n              →\n            </button>\n          </div>\n        </>\n      )}\n    </div>\n  )\n}\n","/**\n * Простая функция для случайного перемешивания массива\n * @param {Array} arr — входной массив\n * @returns {Array} — новый массив с теми же элементами, но в случайном порядке\n */\n\nexport default function shuffle(arr) {\n  return arr\n    .map(v => ({ sort: Math.random(), value: v }))\n    .sort((a, b) => a.sort - b.sort)\n    .map(o => o.value)\n}\n","import { useState, useEffect, useCallback } from 'react'\nimport { useQuery, useQueryClient } from '@tanstack/react-query'\nimport { QUERY_KEYS } from '../../../constants/queryKeys'\nimport { fetchMergedWords } from '../../../api/words'\nimport { useProgress } from '../useProgress'\nimport { useOptions } from '../../base/useOptions'\nimport { useWordNavigation } from '../useWordNavigation'\n\n/**\n * useTestGameLogic — хук, который инкапсулирует всю логику TestGame:\n *  • загрузка allWords через React Query\n *  • навигация по тренировочным словам\n *  • подсчёт прогресса (useProgress)\n *  • формирование options и correctAnswer (useOptions)\n *  • обработка выбора варианта (handleSelect)\n *  • обработка клика по экрану (handleScreenClick)\n */\nexport function useTestGameLogic(words) {\n  const qc = useQueryClient()\n\n  const [celebrating, setCelebrating] = useState(false)\n  const [displayedStreak, setDisplayedStreak] = useState(null)\n  const [selected, setSelected] = useState(null)\n  const [isCorrect, setIsCorrect] = useState(null)\n  const [direction, setDirection] = useState('en-ru')\n\n  const {\n    data: allWords = [],\n    isLoading: allLoading,\n    isError: allError,\n  } = useQuery({\n    queryKey: QUERY_KEYS.WORDS_FULL,\n    queryFn: fetchMergedWords,\n    refetchOnWindowFocus: false,\n    staleTime: 5 * 60_000,\n  })\n\n  const { empty, safeIndex, word, currentId, next, reset } =\n    useWordNavigation(words)\n\n  useEffect(() => {\n    setCelebrating(false)\n    setDisplayedStreak(null)\n    setSelected(null)\n    setIsCorrect(null)\n  }, [currentId])\n\n  const [progress, saveProgress] = useProgress(currentId)\n  const { correctStreak = 0, knownByUser = false } = progress\n\n  const { options, correctAnswer } = useOptions(\n    allWords,\n    words,\n    safeIndex,\n    direction\n  )\n\n  const handleClearSelection = useCallback(() => {\n    setSelected(null)\n    setIsCorrect(null)\n    setCelebrating(false)\n    setDisplayedStreak(null)\n  }, [])\n\n  const invalidateTrainAndVocab = useCallback(() => {\n    qc.invalidateQueries({ queryKey: QUERY_KEYS.TRAIN_WORDS })\n    qc.invalidateQueries({ queryKey: QUERY_KEYS.VOCAB_WORDS })\n  }, [qc])\n\n  const handleSelect = useCallback(\n    choice => {\n      if (selected !== null) return\n      setSelected(choice)\n\n      const isCorrectChoice = choice.toLowerCase() === correctAnswer\n      setIsCorrect(isCorrectChoice)\n\n      const nextStreak = isCorrectChoice ? correctStreak + 1 : 0\n      const update = { correctStreak: nextStreak }\n      if (nextStreak >= 5) update.knownByUser = true\n\n      saveProgress(update)\n\n      if (isCorrectChoice && nextStreak >= 5) {\n        setCelebrating(true)\n        setDisplayedStreak(nextStreak)\n      } else {\n        invalidateTrainAndVocab()\n      }\n    },\n    [\n      selected,\n      correctAnswer,\n      correctStreak,\n      saveProgress,\n      invalidateTrainAndVocab,\n    ]\n  )\n\n  const handleScreenClick = useCallback(() => {\n    if (!celebrating) return\n    setCelebrating(false)\n    setDisplayedStreak(null)\n    setSelected(null)\n    setIsCorrect(null)\n    invalidateTrainAndVocab()\n  }, [celebrating, invalidateTrainAndVocab])\n\n  const rawCount = displayedStreak ?? correctStreak\n  const displayCount = Math.min(rawCount, 5)\n\n  return {\n    isLoading: allLoading,\n    isError: allError,\n    empty,\n    word,\n    safeIndex,\n    direction,\n    setDirection,\n    options,\n    correctAnswer,\n    selected,\n    isCorrect,\n    rawCount,\n    displayCount,\n    celebrating,\n    handleSelect,\n    handleScreenClick,\n    handleClearSelection,\n    next,\n    reset,\n  }\n}\n","import { useState, useEffect } from 'react'\n\n/**\n * useWordNavigation — хук, который хранит текущий индекс, \n * вычисляет безопасный индекс и текущее слово, а также даёт функции\n * для перехода к следующему и сброса навигации.\n *\n * @param {Array} words — массив слов (каждый элемент {id, english, russian, …})\n * @returns {{\n *   safeIndex: number,   // индекс, не выходящий за границы массива\n *   word: object|null,   // текущее слово или null\n *   currentId: number|null, // id текущего слова\n *   next: () => void,    // функция «следующее слово»\n *   reset: () => void    // функция «начать сначала»\n * }}\n */\n\nexport function useWordNavigation(words) {\n  const [index, setIndex] = useState(0)\n\n  const empty = !Array.isArray(words) || words.length === 0\n  const safeIndex = empty ? 0 : Math.min(index, words.length - 1)\n  const word = empty ? null : words[safeIndex]\n  const currentId = word?.id ?? null\n\n  useEffect(() => {\n    setIndex(0)\n  }, [words])\n\n  const next = () => {\n    if (empty) return\n    setIndex(prev => {\n      return prev < words.length - 1 ? prev + 1 : prev\n    })\n  }\n\n  const reset = () => {\n    setIndex(0)\n  }\n\n  return { safeIndex, word, currentId, next, reset, empty }\n}\n","import { useMemo } from 'react'\nimport shuffle from '../../utils/shuffle'\n\nexport function useOptions(allWords, words, safeIndex, direction) {\n  return useMemo(() => {\n    if (\n      !Array.isArray(words) ||\n      words.length === 0 ||\n      safeIndex < 0 ||\n      safeIndex >= words.length\n    )\n      return { options: [], correctAnswer: null }\n\n    const word = words[safeIndex]\n    if (!word || !Array.isArray(allWords) || allWords.length === 0)\n      return { options: [], correctAnswer: null }\n\n    const correctVal =\n      direction === 'en-ru' ? word.russian : word.english\n    const correctLower = correctVal.toLowerCase()\n\n    const pool = allWords\n      .filter(w => w.id !== word.id)\n      .map(w => (direction === 'en-ru' ? w.russian : w.english))\n      .filter(t => t && t.toLowerCase() !== correctLower) \n\n    const distractors = shuffle([...new Set(pool)]).slice(0, 3)\n\n    let options = shuffle([correctVal, ...distractors])\n\n    options = [...new Set(options)].slice(0, 4)\n\n    return {\n      options,\n      correctAnswer: correctLower,\n    }\n  }, [allWords, words, safeIndex, direction])\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"TestGame_container__W4QCg\",\"toggle\":\"TestGame_toggle__d5eTu\",\"active\":\"TestGame_active__5REuC\",\"prompt\":\"TestGame_prompt__D27ei\",\"status\":\"TestGame_status__yVXDb\",\"progress\":\"TestGame_progress__vcjdz\",\"options\":\"TestGame_options__NDWIb\",\"correct\":\"TestGame_correct__afOdp\",\"wrong\":\"TestGame_wrong__N3fIA\",\"footer\":\"TestGame_footer__jXnw9\",\"ok\":\"TestGame_ok__hxm7a\",\"err\":\"TestGame_err__fUU1S\",\"nextButton\":\"TestGame_nextButton__BTOoP\",\"resetButton\":\"TestGame_resetButton__dw-D+\",\"celebration\":\"TestGame_celebration__YTn-x\",\"pop\":\"TestGame_pop__X1akE\"};","import React from 'react'\nimport Spinner from '../../Spinner/Spinner'\nimport styles from './TestGame.module.scss'\n\nexport function TestGameUI(props) {\n  const {\n    isLoading,\n    isError,\n    empty,\n    word,\n    direction,\n    setDirection,\n    options,\n    correctAnswer,\n    selected,\n    isCorrect,\n    rawCount,\n    displayCount,\n    celebrating,\n    handleSelect,\n    handleScreenClick,\n    next,\n    reset,\n    safeIndex,\n    wordsLength,\n    handleClearSelection,\n  } = props\n\n  if (isLoading) {\n    return <Spinner />\n  }\n  if (isError) {\n    return <p className={styles.status}>Ошибка загрузки вариантов</p>\n  }\n  if (empty || (props.knownByUser && !celebrating)) {\n    return <Spinner />\n  }\n\n  return (\n    <div className={styles.container} onClick={handleScreenClick}>\n      <div className={styles.toggle}>\n        <button\n          className={direction === 'en-ru' ? styles.active : ''}\n          onClick={() => setDirection('en-ru')}\n        >\n          Англ → Рус\n        </button>\n        <button\n          className={direction === 'ru-en' ? styles.active : ''}\n          onClick={() => setDirection('ru-en')}\n        >\n          Рус → Англ\n        </button>\n      </div>\n\n      <p className={styles.prompt}>\n        {direction === 'en-ru' ? word.english : word.russian}\n      </p>\n\n      <div className={styles.progress}>\n        <progress value={displayCount} max={5} />\n        <span>{displayCount}/5</span>\n      </div>\n\n      <div className={styles.options}>\n        {options.map(opt => (\n          <button\n            key={opt}\n            disabled={selected !== null || celebrating}\n            onClick={e => {\n              e.stopPropagation()\n              handleSelect(opt)\n            }}\n            className={\n              selected === null\n                ? ''\n                : opt.toLowerCase() === correctAnswer\n                ? styles.correct\n                : opt === selected\n                ? styles.wrong\n                : ''\n            }\n          >\n            {opt}\n          </button>\n        ))}\n      </div>\n\n      {celebrating && (\n        <div className={styles.celebration}>\n          🎉🎆 Отлично! Слово выучено! 🎆🎉\n        </div>\n      )}\n\n      {!celebrating && selected !== null && (\n        <div className={styles.footer}>\n          <p className={isCorrect ? styles.ok : styles.err}>\n            {isCorrect\n              ? '✅ Правильно!'\n              : `❌ Неверно, ответ: ${\n                  direction === 'en-ru' ? word.russian : word.english\n                }`}\n          </p>\n\n          <button\n            onClick={() => {\n              handleClearSelection()\n              next()\n            }}\n            disabled={safeIndex === wordsLength - 1}\n            className={styles.nextButton}\n          >\n            Следующее →\n          </button>\n\n          {safeIndex === wordsLength - 1 && (\n            <button \n              onClick={() => {\n                handleClearSelection()\n                reset()\n              }}\n              className={styles.resetButton}\n            >\n              Начать сначала\n            </button>\n          )}\n        </div>\n      )}\n    </div>\n  )\n}","import React from 'react'\nimport { useTestGameLogic } from '../../../hooks/words/game/useTestGameLogic'\nimport { TestGameUI } from './TestGameUI'\n\nexport default function TestGame({ words }) {\n  const logic = useTestGameLogic(words)\n\n  return <TestGameUI {...logic} wordsLength={words.length} />\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"page\":\"TrainPage_page__AVj1k\",\"backToMenu\":\"TrainPage_backToMenu__-9L1e\",\"title\":\"TrainPage_title__L3Yo3\",\"selection\":\"TrainPage_selection__pdbK7\",\"largeButton\":\"TrainPage_largeButton__Xu2N9\",\"status\":\"TrainPage_status__84YyE\",\"emptyActions\":\"TrainPage_emptyActions__otEk2\",\"linkButton\":\"TrainPage_linkButton__dh8CD\"};","import React, { useState } from 'react'\nimport { useQuery }        from '@tanstack/react-query'\nimport { Link }            from 'react-router-dom'\nimport { fetchMergedWords, STORAGE_KEY_DELETED } from '../../api/words'\nimport FlipCardGame        from '../../components/words/FlipCardGame/FlipCardGame'\nimport TestGame            from '../../components/words/TestGame/TestGame'\nimport styles              from './TrainPage.module.scss'\n\n/**\n * Берём все слова (API + локалка),\n * отфильтровываем:\n *  — изученные (knownByUser)\n *  — удалённые (deletedWords)\n */\n\nasync function fetchTrainWords() {\n  const all     = await fetchMergedWords()\n  const prog    = JSON.parse(localStorage.getItem('vocabProgress') || '{}')\n  const deleted = JSON.parse(localStorage.getItem(STORAGE_KEY_DELETED) || '[]')\n\n  return all.filter(w =>\n    !prog[w.id]?.knownByUser &&\n    !deleted.includes(String(w.id))\n  )\n}\n\nexport default function TrainPage() {\n  const [mode, setMode] = useState(null)\n\n  const { data: trainWords = [], isLoading, isError } = useQuery({\n    queryKey: ['trainWords', mode],\n    queryFn: fetchTrainWords,\n    enabled: Boolean(mode),\n    refetchOnWindowFocus: false,\n    staleTime: 5 * 60_000,\n  })\n\n  if (mode === null) {\n    return (\n      <div className={styles.page}>\n        <h2 className={styles.title}>Выберите режим</h2>\n        <div className={styles.selection}>\n          <button className={styles.largeButton} onClick={() => setMode('flip')}>\n            Переверни карточку\n          </button>\n          <button className={styles.largeButton} onClick={() => setMode('test')}>\n            Тест\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  if (isLoading) return <p className={styles.status}>Загрузка слов…</p>\n  if (isError)   return <p className={styles.status}>Ошибка при загрузке</p>\n\n  if (trainWords.length === 0) {\n    return (\n      <div className={styles.page}>\n        <h2 className={styles.status}>Поздравляем, все слова выучены! 🎉</h2>\n        <div className={styles.emptyActions}>\n          <Link to=\"/vocab\" className={styles.linkButton}>Мой словарный запас</Link>\n          <Link to=\"/add\"   className={styles.linkButton}>Добавить новые слова</Link>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className={styles.page}>\n      <button className={styles.backToMenu} onClick={() => setMode(null)}>\n        ← Назад к выбору режима\n      </button>\n      {mode === 'flip'\n        ? <FlipCardGame words={trainWords} />\n        : <TestGame     words={trainWords} />\n      }\n    </div>\n  )\n}\n"],"names":["QUERY_KEYS","WORDS","WORDS_FULL","TRAIN_WORDS","VOCAB_WORDS","getFromStorage","key","JSON","parse","localStorage","getItem","_unused","setToStorage","data","setItem","stringify","API_URL","process","STORAGE_KEY_ADDED","STORAGE_KEY_DELETED","async","addWord","word","axios","post","concat","then","res","addWordOnServer","id","Date","now","entry","_objectSpread","added","updateWord","put","updateWordOnServer","filter","w","String","deleteWord","startsWith","delete","deleteWordOnServer","deleted","includes","fetchMergedWords","serverWords","get","filtered","map","find","a","STORAGE_KEY","DEFAULT","correctStreak","knownByUser","useProgress","wordId","state","setState","useState","useEffect","all","updates","prev","next","resetProgress","WordCard","_ref","english","transcription","russian","flipped","setFlipped","iconRef","useRef","current","focus","toggleFlip","e","stopPropagation","f","_jsx","className","styles","cardWrapper","onClick","children","_jsxs","card","isFlipped","cardFront","ref","flipIcon","role","tabIndex","onKeyDown","preventDefault","cardBack","translation","FlipCardGame","_currentWord$id","words","qc","useQueryClient","idx","setIdx","direction","setDirection","marked","setMarked","learnedCount","setLearnedCount","safeIndex","Array","isArray","length","Math","min","currentWord","progress","saveProgress","goPrev","useCallback","i","goNext","onKey","window","addEventListener","removeEventListener","container","_Fragment","learnedCounter","AnimatePresence","initial","custom","motion","div","variants","enter","dir","rotateY","opacity","transformOrigin","center","transition","duration","exit","animate","cardMotion","checkButton","invalidateQueries","queryKey","c","setTimeout","disabled","controls","status","shuffle","arr","v","sort","random","value","b","o","useTestGameLogic","celebrating","setCelebrating","displayedStreak","setDisplayedStreak","selected","setSelected","isCorrect","setIsCorrect","allWords","isLoading","allLoading","isError","allError","useQuery","queryFn","refetchOnWindowFocus","staleTime","empty","currentId","reset","_word$id","index","setIndex","useWordNavigation","options","correctAnswer","useMemo","correctVal","correctLower","toLowerCase","pool","t","distractors","Set","slice","useOptions","handleClearSelection","invalidateTrainAndVocab","handleSelect","choice","isCorrectChoice","nextStreak","update","handleScreenClick","rawCount","displayCount","TestGameUI","props","wordsLength","Spinner","toggle","active","prompt","max","opt","correct","wrong","celebration","footer","ok","err","nextButton","resetButton","TestGame","logic","fetchTrainWords","prog","_prog$w$id","TrainPage","mode","setMode","trainWords","enabled","Boolean","page","title","selection","largeButton","emptyActions","Link","to","linkButton","backToMenu"],"sourceRoot":""}