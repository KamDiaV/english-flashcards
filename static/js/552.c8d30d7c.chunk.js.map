{"version":3,"file":"static/js/552.c8d30d7c.chunk.js","mappings":"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","sources":["../node_modules/@tanstack/query-core/src/mutationObserver.ts","../node_modules/@tanstack/react-query/src/useMutation.ts","constants/queryKeys.js","utils/storage.js","api/words.js","webpack://english-flashcards/./src/components/words/WordRow/WordRow.module.scss?52dc","components/words/WordRow/WordRow.jsx","webpack://english-flashcards/./src/components/words/WordList/WordList.module.scss?2cce","components/words/WordList/WordList.jsx","hooks/words/useWordMutations.js","webpack://english-flashcards/./src/pages/HomePage/HomePage.module.scss?bae6","pages/HomePage/HomePage.jsx"],"sourcesContent":["import { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport { Subscribable } from './subscribable'\nimport { shallowEqualObjects } from './utils'\nimport type { QueryClient } from './queryClient'\nimport type {\n  MutateOptions,\n  MutationObserverBaseResult,\n  MutationObserverOptions,\n  MutationObserverResult,\n} from './types'\nimport type { Action, Mutation } from './mutation'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options\n    this.options = this.client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.currentMutation,\n        observer: this,\n      })\n    }\n    this.currentMutation?.setOptions(this.options)\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables:\n        typeof variables !== 'undefined' ? variables : this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    const isLoading = state.status === 'loading'\n    const result: MutationObserverBaseResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    > = {\n      ...state,\n      isLoading,\n      isPending: isLoading,\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n\n    this.currentResult = result as MutationObserverResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    >\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions && this.hasListeners()) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!,\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach(({ listener }) => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n","'use client'\nimport * as React from 'react'\nimport {\n  MutationObserver,\n  notifyManager,\n  parseMutationArgs,\n} from '@tanstack/query-core'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport { useQueryClient } from './QueryClientProvider'\nimport { shouldThrowError } from './utils'\nimport type { MutationFunction, MutationKey } from '@tanstack/query-core'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationFn: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  mutationFn?: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey' | 'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  arg1:\n    | MutationKey\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg2?:\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg3?: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const options = parseMutationArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient({ context: options.context })\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        queryClient,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.useErrorBoundary, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\n","export const QUERY_KEYS = {\n  // Основные запросы слов\n  WORDS: ['words'],\n  WORDS_FULL: ['wordsFull'],\n\n  // Тренировочные слова\n  TRAIN_WORDS: ['trainWords'],\n\n  // Словарный запас\n  VOCAB_WORDS: ['vocabWords'],\n}","export function getFromStorage(key) {\n  try {\n    return JSON.parse(localStorage.getItem(key)) || [];\n  } catch {\n    return [];\n  }\n}\n\nexport function setToStorage(key, data) {\n  localStorage.setItem(key, JSON.stringify(data));\n}\n","import axios from 'axios';\nimport { getFromStorage, setToStorage } from '../utils/storage';\n\nconst API_URL = process.env.REACT_APP_API_URL;\n\nexport const STORAGE_KEY_ADDED   = 'addedWords';\nexport const STORAGE_KEY_DELETED = 'deletedWords';\n\nexport const fetchWordsFromServer  = () =>\n  axios.get(`${API_URL}/words`).then(r => r.data);\n\nexport const addWordOnServer       = (word) =>\n  axios.post(`${API_URL}/words`, word).then(r => r.data);\n\nexport const updateWordOnServer    = (word) =>\n  axios.put(`${API_URL}/words/${word.id}`, word).then(r => r.data);\n\nexport const deleteWordOnServer    = (id) =>\n  axios.delete(`${API_URL}/words/${id}`);\n\n/* ────────────── ADD (он-/офлайн) ────────────── */\nexport async function addWord(word) {\n  try {\n    const data = await addWordOnServer(word);       \n\n    if (data?.id != null) {\n      const withoutDup = getFromStorage(STORAGE_KEY_ADDED)\n        .filter(w => String(w.english).toLowerCase() !== word.english.toLowerCase());\n      setToStorage(STORAGE_KEY_ADDED, withoutDup);\n      return data;         \n    }\n  } catch (_) {\n  }\n\n  const entry  = { id: `local-${Date.now()}`, ...word };\n  const added  = getFromStorage(STORAGE_KEY_ADDED);\n  setToStorage(STORAGE_KEY_ADDED, [...added, entry]);\n  return entry;\n}\n\n/* ────────────── UPDATE ────────────── */\nexport async function updateWord(word) {\n  const data  = await updateWordOnServer(word);\n  const id    = typeof data.id === 'number' ? data.id : word.id;\n  const entry = { id, ...word };\n\n  const merged = getFromStorage(STORAGE_KEY_ADDED)\n    .filter(w => String(w.id) !== String(id));\n  setToStorage(STORAGE_KEY_ADDED, [...merged, entry]);\n  return entry;\n}\n\n/* ────────────── DELETE ────────────── */\nexport async function deleteWord(id) {\n  if (!String(id).startsWith('local-')) {\n    await deleteWordOnServer(id);\n  }\n\n  const kept   = getFromStorage(STORAGE_KEY_ADDED)\n    .filter(w => String(w.id) !== String(id));\n  setToStorage(STORAGE_KEY_ADDED, kept);\n\n  const deleted = getFromStorage(STORAGE_KEY_DELETED);\n  if (!deleted.includes(String(id))) {\n    setToStorage(STORAGE_KEY_DELETED, [...deleted, String(id)]);\n  }\n  return id;\n}\n\n/* ────────────── MERGED LIST ────────────── */\nexport async function fetchMergedWords() {\n  const server = await fetchWordsFromServer();\n  const deleted = getFromStorage(STORAGE_KEY_DELETED);\n  const added   = getFromStorage(STORAGE_KEY_ADDED);\n\n  const filtered = server.filter(w => !deleted.includes(String(w.id)));\n  const merged   = filtered.map(w =>\n    added.find(a => String(a.id) === String(w.id)) || w\n  );\n  const extras = added.filter(a =>\n    !filtered.find(w => String(w.id) === String(a.id))\n  );\n  return [...merged, ...extras];\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"row\":\"WordRow_row__4-rHQ\",\"input\":\"WordRow_input__dVTgS\",\"errorInput\":\"WordRow_errorInput__SwX5M\",\"actions\":\"WordRow_actions__9BBdR\",\"button\":\"WordRow_button__vftN3\"};","import React, { useState, useEffect } from 'react';\nimport styles from './WordRow.module.scss';\n\nexport default function WordRow({ word, onSave, onDelete }) {\n  const [isEditing, setIsEditing] = useState(false);\n  const [edited,   setEdited]     = useState(word);\n\n  const englishInvalid       = isEditing && !edited.english.trim();\n  const transcriptionInvalid = isEditing && !edited.transcription.trim();\n  const russianInvalid       = isEditing && !edited.russian.trim();\n\n  useEffect(() => {\n    if (isEditing) setEdited(word);\n  }, [isEditing, word]);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    setEdited(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleSave = () => {\n    if (englishInvalid || transcriptionInvalid || russianInvalid) return;\n    onSave(edited);\n    setIsEditing(false);\n  };\n\n  const handleCancel = () => {\n    setIsEditing(false);\n    setEdited(word);\n  };\n\n  const handleKeyDown = e => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      handleSave();\n    }\n  };\n\n  return (\n    <tr className={styles.row}>\n      {isEditing ? (\n        <>\n          <td>\n            <input\n              name=\"english\"\n              value={edited.english}\n              onChange={handleChange}\n              onKeyDown={handleKeyDown}\n              className={`${styles.input} ${englishInvalid ? styles.errorInput : ''}`}\n            />\n          </td>\n          <td>\n            <input\n              name=\"transcription\"\n              value={edited.transcription}\n              onChange={handleChange}\n              onKeyDown={handleKeyDown}\n              className={`${styles.input} ${transcriptionInvalid ? styles.errorInput : ''}`}\n            />\n          </td>\n          <td>\n            <input\n              name=\"russian\"\n              value={edited.russian}\n              onChange={handleChange}\n              onKeyDown={handleKeyDown}\n              className={`${styles.input} ${russianInvalid ? styles.errorInput : ''}`}\n            />\n          </td>\n          <td>\n            <input\n              name=\"tags\"\n              value={edited.tags || ''}\n              onChange={handleChange}\n              onKeyDown={handleKeyDown}\n              className={styles.input}\n            />\n          </td>\n          <td className={styles.actions}>\n            <button\n              onClick={handleSave}\n              className={styles.button}\n              disabled={englishInvalid || transcriptionInvalid || russianInvalid}\n            >\n              💾\n            </button>\n            <button onClick={handleCancel} className={styles.button}>❌</button>\n          </td>\n        </>\n      ) : (\n        <>\n          <td>{word.english}</td>\n          <td>{word.transcription}</td>\n          <td>{word.russian}</td>\n          <td>{word.tags}</td>\n          <td className={styles.actions}>\n            <button onClick={() => setIsEditing(true)} className={styles.button}>✏️</button>\n            <button onClick={onDelete} className={styles.button}>🗑</button>\n          </td>\n        </>\n      )}\n    </tr>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"table\":\"WordList_table__9l5tk\"};","import React from 'react'\nimport { useQuery } from '@tanstack/react-query'\nimport { QUERY_KEYS } from '../../../constants/queryKeys'\nimport { fetchMergedWords } from '../../../api/words'\nimport { useWordMutations } from '../../../hooks/words/useWordMutations'\nimport WordRow from '../WordRow/WordRow'\nimport Spinner from '../../Spinner/Spinner'\nimport styles from './WordList.module.scss'\n\nexport default function WordList() {\n  const { deleteWord, updateWord } = useWordMutations()\n\n  const { data: words = [], isLoading } = useQuery({\n    queryKey: QUERY_KEYS.WORDS_FULL,\n    queryFn: fetchMergedWords,\n    staleTime: 300_000,\n    refetchOnWindowFocus: false,\n  })\n\n  if (isLoading) {\n    return <Spinner />\n  }\n\n  return (\n    <table className={styles.table}>\n      <thead>\n        <tr>\n          <th>Слово</th>\n          <th>Транскрипция</th>\n          <th>Перевод</th>\n          <th>Тема</th>\n          <th>Действия</th>\n        </tr>\n      </thead>\n      <tbody>\n        {words.map(w => (\n          <WordRow\n            key={w.id}\n            word={w}\n            onDelete={() => deleteWord(w.id)}\n            onSave={updated => updateWord(updated)}\n          />\n        ))}\n      </tbody>\n    </table>\n  )\n}\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\nimport { QUERY_KEYS }   from '../../constants/queryKeys'\nimport {\n  deleteWord   as apiDeleteWord,\n  updateWord   as apiUpdateWord,\n} from '../../api/words'\n\nexport function useWordMutations() {\n  const qc = useQueryClient()\n\n  const deleteMutation = useMutation({\n    mutationFn: apiDeleteWord,\n    onSuccess: () => {\n      qc.invalidateQueries({ queryKey: QUERY_KEYS.WORDS_FULL })\n      qc.invalidateQueries({ queryKey: QUERY_KEYS.TRAIN_WORDS })\n      qc.invalidateQueries({ queryKey: QUERY_KEYS.VOCAB_WORDS })\n    },\n  })\n\n  const updateMutation = useMutation({\n    mutationFn: apiUpdateWord,\n    onSuccess: () => {\n      qc.invalidateQueries({ queryKey: QUERY_KEYS.WORDS_FULL })\n      qc.invalidateQueries({ queryKey: QUERY_KEYS.TRAIN_WORDS })\n      qc.invalidateQueries({ queryKey: QUERY_KEYS.VOCAB_WORDS })\n    },\n  })\n\n  return {\n    deleteWord: deleteMutation.mutate,\n    updateWord: updateMutation.mutate,\n    isDeleting: deleteMutation.isLoading,\n    isUpdating: updateMutation.isLoading,\n    deleteError: deleteMutation.error,\n    updateError: updateMutation.error,\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"homePage\":\"HomePage_homePage__FhwvF\",\"title\":\"HomePage_title__ygULj\"};","import React from 'react';\nimport WordList from '../../components/words/WordList/WordList';\nimport styles from './HomePage.module.scss';\n\nfunction HomePage() {\n  return (\n    <div className={styles.homePage}>\n      <h2 className={styles.title}>Список слов</h2>\n      <WordList />\n    </div>\n  );\n}\n\nexport default HomePage;\n"],"names":["MutationObserver","Subscribable","constructor","client","options","super","this","setOptions","bindMethods","updateResult","mutate","bind","reset","_this$currentMutation","prevOptions","defaultMutationOptions","shallowEqualObjects","getMutationCache","notify","type","mutation","currentMutation","observer","onUnsubscribe","_this$currentMutation2","hasListeners","removeObserver","onMutationUpdate","action","notifyOptions","listeners","onSuccess","onError","getCurrentResult","currentResult","undefined","variables","mutateOptions","build","_objectSpread","addObserver","execute","state","getDefaultState","isLoading","status","result","isPending","isSuccess","isError","isIdle","notifyManager","batch","_this$mutateOptions$o","_this$mutateOptions","_this$mutateOptions$o2","_this$mutateOptions2","call","data","context","onSettled","_this$mutateOptions$o3","_this$mutateOptions3","_this$mutateOptions$o4","_this$mutateOptions4","error","forEach","_ref","listener","useMutation","arg1","arg2","arg3","React","queryClient","useSyncExternalStore","onStoreChange","subscribe","batchCalls","shouldThrowError","useErrorBoundary","noop","QUERY_KEYS","WORDS","WORDS_FULL","TRAIN_WORDS","VOCAB_WORDS","getFromStorage","key","JSON","parse","localStorage","getItem","_unused","setToStorage","setItem","stringify","API_URL","process","STORAGE_KEY_ADDED","STORAGE_KEY_DELETED","fetchWordsFromServer","axios","get","concat","then","r","addWordOnServer","word","post","updateWordOnServer","put","id","deleteWordOnServer","delete","async","addWord","withoutDup","filter","w","String","english","toLowerCase","_","entry","Date","now","added","updateWord","merged","deleteWord","startsWith","kept","deleted","includes","fetchMergedWords","server","filtered","map","find","a","WordRow","onSave","onDelete","isEditing","setIsEditing","useState","edited","setEdited","englishInvalid","trim","transcriptionInvalid","transcription","russianInvalid","russian","useEffect","handleChange","e","name","value","target","prev","handleSave","handleKeyDown","preventDefault","_jsx","className","styles","children","_jsxs","_Fragment","onChange","onKeyDown","tags","onClick","disabled","handleCancel","WordList","qc","useQueryClient","deleteMutation","mutationFn","apiDeleteWord","invalidateQueries","queryKey","updateMutation","apiUpdateWord","isDeleting","isUpdating","deleteError","updateError","useWordMutations","words","useQuery","queryFn","staleTime","refetchOnWindowFocus","Spinner","updated"],"sourceRoot":""}