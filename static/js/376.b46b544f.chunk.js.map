{"version":3,"file":"static/js/376.b46b544f.chunk.js","mappings":"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","sources":["webpack://english-flashcards/./src/pages/VocabPage.module.scss?a155","pages/VocabPage.jsx","hooks/useProgress.js","api/words.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"page\":\"VocabPage_page__NF59N\",\"status\":\"VocabPage_status__TUI2M\",\"title\":\"VocabPage_title__tWUSo\",\"table\":\"VocabPage_table__ULPch\",\"actions\":\"VocabPage_actions__wZR-C\",\"repeatButton\":\"VocabPage_repeatButton__E5EtC\"};","import React from 'react'\nimport { useQuery, useQueryClient } from '@tanstack/react-query'\nimport { fetchMergedWords }         from '../api/words'\nimport { resetProgress } from '../hooks/useProgress'\nimport styles                       from './VocabPage.module.scss'\n\nexport default function VocabPage() {\n  const qc = useQueryClient()\n  const progress = JSON.parse(localStorage.getItem('vocabProgress') || '{}')\n\n  const { data: words = [], isLoading, isError } = useQuery({\n    queryKey: ['vocabWords'],\n    queryFn: async () => {\n      const all = await fetchMergedWords()\n      return all.filter(w => progress[w.id]?.knownByUser)\n    },\n    refetchOnWindowFocus: false\n  })\n\n  const handleRemove = id => {\n    resetProgress(id)\n\n    qc.setQueryData(['vocabWords'], old =>\n      (old || []).filter(w => w.id !== id)\n    )\n\n    const removed = words.find(w => w.id === id)\n    qc.setQueryData(['trainWords'], old =>\n      removed ? [removed, ...(old || [])] : (old || [])\n    )\n  }\n\n  if (isLoading) return <p className={styles.status}>Загрузка…</p>\n  if (isError)   return <p className={styles.status}>Ошибка при загрузке</p>\n\n  return (\n    <div className={styles.page}>\n      <h2 className={styles.title}>Мой словарный запас</h2>\n      {words.length === 0 ? (\n        <p className={styles.status}>Словарь пока пуст.</p>\n      ) : (\n        <table className={styles.table}>\n          <thead>\n            <tr>\n              <th>Слово</th><th>Транскрипция</th><th>Перевод</th><th>Тема</th><th>Действия</th>\n            </tr>\n          </thead>\n          <tbody>\n            {words.map(w => (\n              <tr key={`vocab-${w.id}`}>\n                <td>{w.english}</td>\n                <td>{w.transcription || '—'}</td>\n                <td>{w.russian}</td>\n                <td>{w.tags || '—'}</td>\n                <td className={styles.actions}>\n                  <button\n                    className={styles.repeatButton}\n                    onClick={() => handleRemove(w.id)}\n                  > Повторить </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </div>\n  )\n}\n","import { useState, useEffect } from 'react'\n\nconst STORAGE_KEY = 'vocabProgress'\nconst DEFAULT = { correctStreak: 0, knownByUser: false }\n\n/**\n * Хук хранит для каждого wordId:\n *  - correctStreak: сколько раз подряд угадано в тесте\n *  - knownByUser\n *\n * Возвращает [state, saveProgress, resetProgress]\n */\nexport function useProgress(wordId) {\n  const [state, setState] = useState(DEFAULT)\n\n  useEffect(() => {\n    const all = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}')\n    setState(all[wordId] || DEFAULT)\n  }, [wordId])\n\n  const saveProgress = updates => {\n    setState(prev => {\n      const next = { ...prev, ...updates }\n      const all  = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}')\n      all[wordId] = next\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(all))\n      return next\n    })\n  }\n\n  const resetProgress = () => {\n    setState(DEFAULT)\n    const all = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}')\n    delete all[wordId]\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(all))\n  }\n\n  return [state, saveProgress, resetProgress]\n}\n\n/**\n * Глобальная функция для сброса прогресса вне компонента\n */\nexport function resetProgress(wordId) {\n  const all = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}')\n  delete all[wordId]\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(all))\n}\n","import axios from 'axios'\n\nconst API_URL = process.env.REACT_APP_API_URL\n\nexport const STORAGE_KEY_ADDED   = 'addedWords'\nexport const STORAGE_KEY_DELETED = 'deletedWords'\n\n/**\n * Получаем данные с сервера (без учёта локальных изменений)\n */\nexport function fetchWordsFromServer() {\n  return axios\n    .get(`${API_URL}/words`)\n    .then(res => res.data)\n}\n\n/**\n * Добавляем новое слово\n */\nexport function addWordOnServer(word) {\n  return axios\n    .post(`${API_URL}/words`, word)\n    .then(res => res.data)\n}\n\n/**\n * Обновляем слово на сервере\n */\nexport function updateWordOnServer(word) {\n  return axios\n    .put(`${API_URL}/words/${word.id}`, word)\n    .then(res => res.data)\n}\n\n/**\n * Удаляем слово на сервере\n */\nexport function deleteWordOnServer(id) {\n  return axios.delete(`${API_URL}/words/${id}`)\n}\n\n/**\n * Обёртка: POST + локальное сохранение\n */\nexport async function addWord(word) {\n  const data = await addWordOnServer(word)\n  const id = typeof data.id === 'number' ? data.id : `local-${Date.now()}`\n\n  const entry = {\n    id,\n    english: word.english,\n    transcription: word.transcription,\n    russian: word.russian,\n    tags: word.tags\n  }\n\n  const stored = JSON.parse(localStorage.getItem(STORAGE_KEY_ADDED) || '[]')\n  localStorage.setItem(\n    STORAGE_KEY_ADDED,\n    JSON.stringify([...stored, entry])\n  )\n\n  return entry\n}\n\n/**\n * Обёртка: PUT + локальная синхронизация (для редактирования локальных слов)\n */\nexport async function updateWord(word) {\n  const data = await updateWordOnServer(word)\n  const id = typeof data.id === 'number' ? data.id : word.id\n\n  const entry = {\n    id,\n    english:      word.english,\n    transcription: word.transcription,\n    russian:      word.russian,\n    tags:         word.tags\n  }\n\n  const stored = JSON.parse(localStorage.getItem(STORAGE_KEY_ADDED) || '[]')\n    .filter(w => String(w.id) !== String(id))\n  localStorage.setItem(\n    STORAGE_KEY_ADDED,\n    JSON.stringify([...stored, entry])\n  )\n\n  return entry\n}\n\n/**\n * Обёртка: DELETE + пометка в deletedWords\n */\nexport async function deleteWord(id) {\n  if (!String(id).startsWith('local-')) {\n    await deleteWordOnServer(id)\n  }\n\n  const added = JSON.parse(localStorage.getItem(STORAGE_KEY_ADDED) || '[]')\n    .filter(w => String(w.id) !== String(id))\n  localStorage.setItem(\n    STORAGE_KEY_ADDED,\n    JSON.stringify(added)\n  )\n\n  const deleted = JSON.parse(localStorage.getItem(STORAGE_KEY_DELETED) || '[]')\n  if (!deleted.includes(String(id))) {\n    deleted.push(String(id))\n    localStorage.setItem(\n      STORAGE_KEY_DELETED,\n      JSON.stringify(deleted)\n    )\n  }\n\n  return id\n}\n\n/**\n * Получить слова серверные и локальные:\n *  1) Фетчим с сервера\n *  2) Отрезаем удалённые (deletedWords)\n *  3) Заменяем серверные на локальные правки (addedWords)\n *  4) Добавляем полностью новые из addedWords\n */\nexport async function fetchMergedWords() {\n  const serverWords = await fetchWordsFromServer()\n  const deleted = JSON.parse(localStorage.getItem(STORAGE_KEY_DELETED) || '[]')\n  const added = JSON.parse(localStorage.getItem(STORAGE_KEY_ADDED) || '[]')\n\n  const filtered = serverWords.filter(w => !deleted.includes(String(w.id)))\n\n  const merged = filtered.map(w =>\n    added.find(a => String(a.id) === String(w.id)) || w\n  )\n\n  const extras = added.filter(a =>\n    !filtered.find(w => String(w.id) === String(a.id))\n  )\n\n  return [...merged, ...extras]\n}\n"],"names":["VocabPage","qc","useQueryClient","progress","JSON","parse","localStorage","getItem","data","words","isLoading","isError","useQuery","queryKey","queryFn","async","fetchMergedWords","filter","w","_progress$w$id","id","knownByUser","refetchOnWindowFocus","_jsx","className","styles","status","children","_jsxs","page","title","length","table","map","english","transcription","russian","tags","actions","repeatButton","onClick","resetProgress","setQueryData","old","removed","find","handleRemove","STORAGE_KEY","DEFAULT","correctStreak","useProgress","wordId","state","setState","useState","useEffect","all","updates","prev","next","setItem","stringify","API_URL","process","STORAGE_KEY_ADDED","STORAGE_KEY_DELETED","addWord","word","axios","post","then","res","addWordOnServer","entry","Date","now","stored","updateWord","put","updateWordOnServer","String","deleteWord","startsWith","delete","deleteWordOnServer","added","deleted","includes","push","serverWords","get","filtered","a"],"sourceRoot":""}