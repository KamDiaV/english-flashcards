{"version":3,"file":"static/js/205.3ffdbf8f.chunk.js","mappings":"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","sources":["webpack://english-flashcards/./src/components/words/WordRow.module.scss?99e8","components/words/WordRow.jsx","webpack://english-flashcards/./src/components/words/WordList.module.scss?36a8","components/words/WordList.jsx","hooks/useWordMutations.js","webpack://english-flashcards/./src/pages/HomePage.module.scss?5436","pages/HomePage.jsx","api/words.js","../node_modules/@tanstack/query-core/src/mutationObserver.ts","../node_modules/@tanstack/react-query/src/useMutation.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"row\":\"WordRow_row__DfsRx\",\"input\":\"WordRow_input__01GKN\",\"errorInput\":\"WordRow_errorInput__d+OXt\",\"actions\":\"WordRow_actions__DTr2H\",\"button\":\"WordRow_button__rXi1T\"};","import React, { useState, useEffect } from 'react'\nimport styles from './WordRow.module.scss'\n\nexport default function WordRow({ word, onSave, onDelete }) {\n  const [isEditing, setIsEditing] = useState(false)\n  const [edited, setEdited]       = useState(word)\n\n  const englishInvalid = isEditing && !edited.english.trim()\n  const russianInvalid = isEditing && !edited.russian.trim()\n\n  useEffect(() => {\n    if (isEditing) setEdited(word)\n  }, [isEditing, word])\n\n  const handleChange = e => {\n    const { name, value } = e.target\n    setEdited(prev => ({ ...prev, [name]: value }))\n  }\n\n  const handleSave = () => {\n    if (englishInvalid || russianInvalid) return\n    onSave(edited)\n    setIsEditing(false)\n  }\n\n  const handleCancel = () => {\n    setIsEditing(false)\n    setEdited(word)\n  }\n\n  return (\n    <tr className={styles.row}>\n      {isEditing ? (\n        <>   \n          <td>\n            <input\n              name=\"english\"\n              value={edited.english}\n              onChange={handleChange}\n              className={`${styles.input} ${englishInvalid ? styles.errorInput : ''}`}\n            />\n          </td>\n          <td>\n            <input\n              name=\"transcription\"\n              value={edited.transcription}\n              onChange={handleChange}\n              className={styles.input}\n            />\n          </td>\n          <td>\n            <input\n              name=\"russian\"\n              value={edited.russian}\n              onChange={handleChange}\n              className={`${styles.input} ${russianInvalid ? styles.errorInput : ''}`}\n            />\n          </td>\n          <td>\n            <input\n              name=\"tags\"\n              value={edited.tags || ''}\n              onChange={handleChange}\n              className={styles.input}\n            />\n          </td>\n          <td className={styles.actions}>\n            <button\n              onClick={handleSave}\n              className={styles.button}\n              disabled={englishInvalid || russianInvalid}\n            >\n              💾\n            </button>\n            <button onClick={handleCancel} className={styles.button}>❌</button>\n          </td>\n        </>\n      ) : (\n        <>  \n          <td>{word.english}</td>\n          <td>{word.transcription || '—'}</td>\n          <td>{word.russian}</td>\n          <td>{word.tags || '—'}</td>\n          <td className={styles.actions}>\n            <button\n              onClick={() => setIsEditing(true)}\n              className={styles.button}\n            >\n              ✏️\n            </button>\n            <button onClick={onDelete} className={styles.button}>🗑</button>\n          </td>\n        </>\n      )}\n    </tr>\n  )\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"table\":\"WordList_table__1vw7i\"};","import React from 'react'\nimport { useQuery } from '@tanstack/react-query'\nimport { fetchMergedWords } from '../../api/words'\nimport { useWordMutations } from '../../hooks/useWordMutations'\nimport WordRow from './WordRow'\nimport styles  from './WordList.module.scss'\n\nexport default function WordList() {\n  const { deleteWord, updateWord } = useWordMutations()\n  const { data: words = [], isLoading } = useQuery(\n    ['words'],\n    fetchMergedWords,\n    { staleTime: 300_000, refetchOnWindowFocus: false }\n  )\n\n  if (isLoading) {\n    return <p className={styles.loading}>Загрузка слов…</p>\n  }\n\n  return (\n    <table className={styles.table}>\n      <thead>\n        <tr>\n          <th>Слово</th>\n          <th>Транскрипция</th>\n          <th>Перевод</th>\n          <th>Тема</th>\n          <th>Действия</th>\n        </tr>\n      </thead>\n      <tbody>\n        {words.map(w => (\n          <WordRow\n            key={w.id}\n            word={w}\n            onDelete={() => deleteWord(w.id)}\n            onSave={updated => updateWord(updated)}\n          />\n        ))}\n      </tbody>\n    </table>\n  )\n}\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\nimport { deleteWord as apiDeleteWord, updateWord as apiUpdateWord } from '../api/words'\n\n/**\n * Кастомный хук для мутаций слова: удаления и обновления.\n */\nexport function useWordMutations() {\n  const qc = useQueryClient()\n\n  const deleteMutation = useMutation(apiDeleteWord, {\n    onSuccess: () => {\n      qc.invalidateQueries(['words'])\n      qc.invalidateQueries(['trainWords'])\n      qc.invalidateQueries(['vocabWords'])\n    }\n  })\n\n  const updateMutation = useMutation(apiUpdateWord, {\n    onSuccess: () => {\n      qc.invalidateQueries(['words'])\n      qc.invalidateQueries(['trainWords'])\n      qc.invalidateQueries(['vocabWords'])\n    }\n  })\n\n  return {\n    deleteWord: deleteMutation.mutate,\n    updateWord: updateMutation.mutate,\n    isDeleting: deleteMutation.isLoading,\n    isUpdating: updateMutation.isLoading,\n    deleteError: deleteMutation.error,\n    updateError: updateMutation.error\n  }\n}","// extracted by mini-css-extract-plugin\nexport default {\"homePage\":\"HomePage_homePage__aSn5X\",\"title\":\"HomePage_title__y-VCo\"};","import React from 'react';\nimport WordList from '../components/words/WordList';\nimport styles from './HomePage.module.scss';\n\nfunction HomePage() {\n  return (\n    <div className={styles.homePage}>\n      <h2 className={styles.title}>Список слов</h2>\n      <WordList />\n    </div>\n  );\n}\n\nexport default HomePage;\n","import axios from 'axios'\n\nconst API_URL = process.env.REACT_APP_API_URL\n\nexport const STORAGE_KEY_ADDED   = 'addedWords'\nexport const STORAGE_KEY_DELETED = 'deletedWords'\n\n/**\n * Получаем данные с сервера (без учёта локальных изменений)\n */\nexport function fetchWordsFromServer() {\n  return axios\n    .get(`${API_URL}/words`)\n    .then(res => res.data)\n}\n\n/**\n * Добавляем новое слово\n */\nexport function addWordOnServer(word) {\n  return axios\n    .post(`${API_URL}/words`, word)\n    .then(res => res.data)\n}\n\n/**\n * Обновляем слово на сервере\n */\nexport function updateWordOnServer(word) {\n  return axios\n    .put(`${API_URL}/words/${word.id}`, word)\n    .then(res => res.data)\n}\n\n/**\n * Удаляем слово на сервере\n */\nexport function deleteWordOnServer(id) {\n  return axios.delete(`${API_URL}/words/${id}`)\n}\n\n/**\n * Обёртка: POST + локальное сохранение\n */\nexport async function addWord(word) {\n  const data = await addWordOnServer(word)\n  const id = typeof data.id === 'number' ? data.id : `local-${Date.now()}`\n\n  const entry = {\n    id,\n    english: word.english,\n    transcription: word.transcription,\n    russian: word.russian,\n    tags: word.tags\n  }\n\n  const stored = JSON.parse(localStorage.getItem(STORAGE_KEY_ADDED) || '[]')\n  localStorage.setItem(\n    STORAGE_KEY_ADDED,\n    JSON.stringify([...stored, entry])\n  )\n\n  return entry\n}\n\n/**\n * Обёртка: PUT + локальная синхронизация (для редактирования локальных слов)\n */\nexport async function updateWord(word) {\n  const data = await updateWordOnServer(word)\n  const id = typeof data.id === 'number' ? data.id : word.id\n\n  const entry = {\n    id,\n    english:      word.english,\n    transcription: word.transcription,\n    russian:      word.russian,\n    tags:         word.tags\n  }\n\n  const stored = JSON.parse(localStorage.getItem(STORAGE_KEY_ADDED) || '[]')\n    .filter(w => String(w.id) !== String(id))\n  localStorage.setItem(\n    STORAGE_KEY_ADDED,\n    JSON.stringify([...stored, entry])\n  )\n\n  return entry\n}\n\n/**\n * Обёртка: DELETE + пометка в deletedWords\n */\nexport async function deleteWord(id) {\n  if (!String(id).startsWith('local-')) {\n    await deleteWordOnServer(id)\n  }\n\n  const added = JSON.parse(localStorage.getItem(STORAGE_KEY_ADDED) || '[]')\n    .filter(w => String(w.id) !== String(id))\n  localStorage.setItem(\n    STORAGE_KEY_ADDED,\n    JSON.stringify(added)\n  )\n\n  const deleted = JSON.parse(localStorage.getItem(STORAGE_KEY_DELETED) || '[]')\n  if (!deleted.includes(String(id))) {\n    deleted.push(String(id))\n    localStorage.setItem(\n      STORAGE_KEY_DELETED,\n      JSON.stringify(deleted)\n    )\n  }\n\n  return id\n}\n\n/**\n * Получить слова серверные и локальные:\n *  1) Фетчим с сервера\n *  2) Отрезаем удалённые (deletedWords)\n *  3) Заменяем серверные на локальные правки (addedWords)\n *  4) Добавляем полностью новые из addedWords\n */\nexport async function fetchMergedWords() {\n  const serverWords = await fetchWordsFromServer()\n  const deleted = JSON.parse(localStorage.getItem(STORAGE_KEY_DELETED) || '[]')\n  const added = JSON.parse(localStorage.getItem(STORAGE_KEY_ADDED) || '[]')\n\n  const filtered = serverWords.filter(w => !deleted.includes(String(w.id)))\n\n  const merged = filtered.map(w =>\n    added.find(a => String(a.id) === String(w.id)) || w\n  )\n\n  const extras = added.filter(a =>\n    !filtered.find(w => String(w.id) === String(a.id))\n  )\n\n  return [...merged, ...extras]\n}\n","import { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport { Subscribable } from './subscribable'\nimport { shallowEqualObjects } from './utils'\nimport type { QueryClient } from './queryClient'\nimport type {\n  MutateOptions,\n  MutationObserverBaseResult,\n  MutationObserverOptions,\n  MutationObserverResult,\n} from './types'\nimport type { Action, Mutation } from './mutation'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options\n    this.options = this.client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.currentMutation,\n        observer: this,\n      })\n    }\n    this.currentMutation?.setOptions(this.options)\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables:\n        typeof variables !== 'undefined' ? variables : this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    const result: MutationObserverBaseResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    > = {\n      ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n\n    this.currentResult = result as MutationObserverResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    >\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions && this.hasListeners()) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!,\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach(({ listener }) => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n","'use client'\nimport * as React from 'react'\nimport {\n  MutationObserver,\n  notifyManager,\n  parseMutationArgs,\n} from '@tanstack/query-core'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport { useQueryClient } from './QueryClientProvider'\nimport { shouldThrowError } from './utils'\nimport type { MutationFunction, MutationKey } from '@tanstack/query-core'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationFn: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  mutationFn?: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey' | 'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  arg1:\n    | MutationKey\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg2?:\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg3?: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const options = parseMutationArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient({ context: options.context })\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        queryClient,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.useErrorBoundary, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\n"],"names":["WordRow","_ref","word","onSave","onDelete","isEditing","setIsEditing","useState","edited","setEdited","englishInvalid","english","trim","russianInvalid","russian","useEffect","handleChange","e","name","value","target","prev","_jsx","className","styles","children","_jsxs","_Fragment","onChange","transcription","tags","onClick","handleSave","disabled","handleCancel","WordList","deleteWord","updateWord","qc","useQueryClient","deleteMutation","useMutation","apiDeleteWord","onSuccess","invalidateQueries","updateMutation","apiUpdateWord","mutate","isDeleting","isLoading","isUpdating","deleteError","error","updateError","useWordMutations","data","words","useQuery","fetchMergedWords","staleTime","refetchOnWindowFocus","loading","table","map","w","id","updated","API_URL","process","STORAGE_KEY_ADDED","STORAGE_KEY_DELETED","async","addWord","axios","post","then","res","addWordOnServer","entry","Date","now","stored","JSON","parse","localStorage","getItem","setItem","stringify","put","updateWordOnServer","filter","String","startsWith","delete","deleteWordOnServer","added","deleted","includes","push","serverWords","get","filtered","find","a","MutationObserver","Subscribable","constructor","client","options","super","this","setOptions","bindMethods","updateResult","bind","reset","_this$currentMutation","prevOptions","defaultMutationOptions","shallowEqualObjects","getMutationCache","notify","type","mutation","currentMutation","observer","onUnsubscribe","_this$currentMutation2","hasListeners","removeObserver","onMutationUpdate","action","notifyOptions","listeners","onError","getCurrentResult","currentResult","undefined","variables","mutateOptions","build","addObserver","execute","state","getDefaultState","result","status","isSuccess","isError","isIdle","notifyManager","batch","_this$mutateOptions$o","_this$mutateOptions","_this$mutateOptions$o2","_this$mutateOptions2","call","context","onSettled","_this$mutateOptions$o3","_this$mutateOptions3","_this$mutateOptions$o4","_this$mutateOptions4","forEach","listener","arg1","arg2","arg3","React","queryClient","useSyncExternalStore","onStoreChange","subscribe","batchCalls","shouldThrowError","useErrorBoundary","noop"],"sourceRoot":""}